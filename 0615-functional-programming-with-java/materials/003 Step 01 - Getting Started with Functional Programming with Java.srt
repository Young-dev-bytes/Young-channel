1
00:00:02,060 --> 00:00:03,740
Welcome back!
欢迎回来!

2
00:00:03,740 --> 00:00:06,460
Let's now, jump right in.
让我们现在，直接跳进去。

3
00:00:06,460 --> 00:00:12,680
One of the first things that you'd need to understand is, functional programming is a paradigm shift.
你需要了解的第一件事是，函数式编程是一种范式转变。

4
00:00:12,680 --> 00:00:15,650
What do I mean by a paradigm shift?
我说的范式转变是什么意思？

5
00:00:15,660 --> 00:00:20,920
It means that you would need to change how you'd think about problem-solving,
它意味着你需要改变你对解决问题的思考方式、

6
00:00:20,920 --> 00:00:27,920
to master functional programming. And we are here to help you make that transition. In this course,
来掌握函数式编程。而我们在这里就是要帮助你实现这一转变。在这个课程中、

7
00:00:27,920 --> 00:00:34,000
we'll take a step-by-step approach to introduce functional programming to you.
我们将采取循序渐进的方式，向你介绍函数式编程。

8
00:00:34,000 --> 00:00:38,460
In this first section, we start with two key objectives.
在这第一节中，我们从两个关键目标开始。

9
00:00:38,460 --> 00:00:44,160
Number one, is to help you understand how functional programming is different.
第一，帮助你了解函数式编程有什么不同。

10
00:00:44,160 --> 00:00:49,620
Number two, is to help you understand a few basic functional programming concepts.
第二，帮助你理解一些基本的函数式编程概念。

11
00:00:49,620 --> 00:00:50,890
We'll talk about Streams,
我们将讨论流、

12
00:00:50,890 --> 00:00:57,390
we will talk about Lambda Expressions, and we will talk about something called Method References.
我们将讨论Lambda表达式，我们将讨论一个叫做方法引用的东西。

13
00:00:57,390 --> 00:01:04,100
As usual, we'll take a very very hands-on approach towards learning functional programming.
像往常一样，我们将采取非常非常实用的方法来学习函数式编程。

14
00:01:04,100 --> 00:01:07,440
We'll write a few examples in traditional approach,
我们将用传统的方法写几个例子、

15
00:01:07,440 --> 00:01:11,820
and look at, how you can write similar code in functional programming.
并看看你如何在函数式编程中写出类似的代码。

16
00:01:11,820 --> 00:01:12,960
Let's quickly get started.
让我们迅速开始吧。

17
00:01:12,970 --> 00:01:18,350
Creating a new project and starting to write some code. I'm going to create a new project.
创建一个新的项目并开始写一些代码。我将创建一个新的项目。

18
00:01:18,370 --> 00:01:20,430
I have Eclipse open.
我已经打开了Eclipse。

19
00:01:20,430 --> 00:01:22,370
I've already chosen a workspace.
我已经选择了一个工作区。

20
00:01:22,380 --> 00:01:24,140
I would want to create a new project.
我想创建一个新的项目。

21
00:01:24,150 --> 00:01:28,150
So, let's go ahead and create a new Java Project, that's what we'd want to create.
所以，让我们继续前进，创建一个新的Java项目，这就是我们想要创建的东西。

22
00:01:28,150 --> 00:01:34,670
File new, Java Project, and let's give the project a name.
文件新建，Java项目，让我们给这个项目起个名字。

23
00:01:34,690 --> 00:01:44,230
I'll just call this, functional-programming-with-java. As you can see in here, I'm using Java 9.
我就叫它，functional-programming-with-java。正如你在这里看到的，我使用的是Java 9。

24
00:01:44,230 --> 00:01:50,770
Any version of Java greater than 9, is cool. So, Java 9, 10, 11,12; the code which we write in
任何大于9的Java版本，都是很酷的。所以，Java 9、10、11、12；我们在本课程中写的代码

25
00:01:50,770 --> 00:01:54,900
this course is compatible with all the versions. That's the only thing you'd need to do.
本课程所写的代码与所有的版本都是兼容的。这是你唯一需要做的事情。

26
00:01:54,940 --> 00:01:58,940
And after that you can say, Finish.
之后你就可以说，完成。

27
00:01:58,940 --> 00:02:01,340
Now, the project is created for us.
现在，这个项目已经为我们创建。

28
00:02:01,340 --> 00:02:04,670
We have a source folder, where we can write our source code.
我们有一个源文件夹，在那里我们可以写我们的源代码。

29
00:02:04,670 --> 00:02:08,720
Let's get started with creating our first example.
让我们开始创建我们的第一个例子。

30
00:02:08,720 --> 00:02:13,920
The first problem that we would want to solve is, we would want to print a set of numbers.
我们想解决的第一个问题是，我们想打印一组数字。

31
00:02:13,920 --> 00:02:18,280
So, we'll have a list of numbers, and we would want to actually print
所以，我们将有一个数字列表，我们想实际打印出

32
00:02:18,280 --> 00:02:22,900
each element in that list, one by one on a separate line.
列表中的每个元素，一个接一个地打印在一个单独的行上。

33
00:02:22,900 --> 00:02:25,120
Now, how do we do that in a traditional approach?
现在，我们如何用传统的方法来做这件事呢？

34
00:02:25,160 --> 00:02:26,960
Let's quickly look at it.
让我们快速看一下。

35
00:02:26,980 --> 00:02:36,160
I'll Create a new Java class. So, I'll say, new class and I would want to give it a name of, FP01.
我将创建一个新的Java类。所以，我会说，新的类，我想给它一个名字，FP01。

36
00:02:36,170 --> 00:02:45,100
So, we would use Functional Programming 01, is where we are in right now and I'll class this, Structured.
所以，我们将使用功能编程01，这是我们现在所处的位置，我将把它归类为，结构化。

37
00:02:45,100 --> 00:02:52,890
So, FP Structured, is the name of the class and the package name I would give it as, programming.
所以，FP Structured是这个类的名字，我给它的包名是：编程。

38
00:02:52,890 --> 00:02:57,700
Let's add in a main method and let's click, Finish.
让我们添加一个主方法，然后点击 "完成"。

39
00:02:57,780 --> 00:03:02,660
This would create the class for us with the main method, which is present in here, and over here I can
这将为我们创建一个带有主方法的类，它就在这里，在这里我可以

40
00:03:02,670 --> 00:03:04,230
write all the code that we would want.
写下我们想要的所有代码。

41
00:03:04,230 --> 00:03:12,200
So, what do we want to do? We would want to write a method to printAllNumbersInList.
那么，我们要做什么呢？我们想写一个方法来打印AllNumbersInList。

42
00:03:12,200 --> 00:03:14,040
And which approach do you want to use?
你想用哪种方法呢？

43
00:03:14,040 --> 00:03:21,400
We'd want to use a Structured approach, which is the traditional programming approach. Structured approach.
我们想使用结构化方法，也就是传统的编程方法。结构化的方法。

44
00:03:21,400 --> 00:03:22,580
What do we want to print?
我们想打印什么？

45
00:03:22,580 --> 00:03:25,430
We'd want to print, a list of numbers.
我们想打印，一个数字列表。

46
00:03:25,470 --> 00:03:27,820
How do we create a list of numbers?
我们如何创建一个数字的列表？

47
00:03:27,820 --> 00:03:33,450
I can say, List.of. Let's enter a sequence of numbers.
我可以说，List.of。让我们输入一个数字的序列。

48
00:03:33,450 --> 00:03:34,880
This can be random numbers.
这可以是随机数字。

49
00:03:34,880 --> 00:03:44,420
So, let's enter 12, 9, 13, 4, 6, 2, 4,.
所以，让我们输入12，9，13，4，6，2，4，。

50
00:03:44,420 --> 00:03:47,680
Let's have a few duplicates as well, so 12, 15.
让我们也有一些重复的数字，所以12，15。

51
00:03:47,680 --> 00:03:50,190
Let's have a set of numbers in here.
让我们在这里有一组数字。

52
00:03:50,190 --> 00:03:54,090
Now, it's first giving me a compilation errors on the list.
现在，它首先在列表上给我一个编译错误。

53
00:03:54,090 --> 00:03:54,590
Why?
为什么？

54
00:03:54,590 --> 00:03:58,810
Because I've not really imported it in. So, I would want to use java.util.List;
因为我没有真正把它导入。所以，我想使用java.util.List；

55
00:03:58,830 --> 00:04:03,640
So, over here you can see that it's now imported in, java.util.List.
所以，在这里你可以看到，它现在已经被导入了，java.util.List。

56
00:04:03,640 --> 00:04:06,580
I just needed to do Ctrl 1 or Command 1,
我只需按下Ctrl 1或Command 1、

57
00:04:06,580 --> 00:04:10,160
and take the option to import, java.util.List.
并选择导入 java.util.List。

58
00:04:10,160 --> 00:04:12,700
Aha! The method does not really exist right?
啊哈，这个方法其实并不存在，对吗？

59
00:04:12,750 --> 00:04:16,870
Let's try and create the method right now. Ctrl 1 or Command 1,
让我们试着现在就创建这个方法。Ctrl 1或Command 1、

60
00:04:16,890 --> 00:04:22,560
and it says, create the method. Please do create the method for me. Cool! The method is now created for
它说，创建方法。请为我创建这个方法。很好! 该方法现在已经为

61
00:04:22,560 --> 00:04:30,180
us. You can say it's private static void printAllNumbersInListStructured, and I'll want to give a
我们创建了。你可以说它是私有的静态void printAllNumbersInListStructured，我想在这里给一个

62
00:04:30,180 --> 00:04:41,420
name over here. I would want to call this, numbers. And I'll remove this line Ctrl D, Command D; and over here I'd
名称。我想把它叫做 "数字"。我将删除这一行Ctrl D，Command D；在这里我想

63
00:04:41,450 --> 00:04:49,530
want to print all the numbers in the list. Now, you can write the program by yourself. How do you write
想打印列表中的所有数字。现在，你可以自己写这个程序。你怎么写

64
00:04:49,530 --> 00:04:55,840
it? The first thing that we'd need to think about is, how to loop the numbers?
怎么写？我们需要考虑的第一件事是，如何对数字进行循环？

65
00:04:55,840 --> 00:05:00,490
That's the traditional approach, right? So, we would want to first figure out, how do you loop all the numbers.
这就是传统的方法，对吗？所以，我们首先要想清楚，你如何循环所有的数字。

66
00:05:00,490 --> 00:05:06,820
And once you decide how to loop, you can take each of the individual numbers and print it.
一旦你决定了如何循环，你就可以把每个单独的数字打印出来。

67
00:05:06,820 --> 00:05:10,160
So, we'll first choose between, okay
所以，我们首先要选择，好的

68
00:05:10,160 --> 00:05:15,740
should I use a traditional For loop or should I go for enhanced For loop?
我应该使用传统的For循环还是应该使用增强型For循环？

69
00:05:15,760 --> 00:05:23,720
Let's use the enhanced For loop. I'll say, for int number in numbers.
让我们使用增强型For循环。我会说，for int number in numbers.

70
00:05:23,720 --> 00:05:26,030
What do you want to do?
你想做什么？

71
00:05:26,030 --> 00:05:32,690
We'd want to print them out. So, sysout, and number.
我们想把它们打印出来。所以，sysout，和number。

72
00:05:32,690 --> 00:05:34,390
Is that what we'd want to loop?
这就是我们要的循环吗？

73
00:05:34,390 --> 00:05:38,610
So, we'd want to print all the numbers in lists, in a structured way.
所以，我们想以一种结构化的方式打印所有的数字。

74
00:05:38,680 --> 00:05:43,990
All that we needed to do was to loop the list of numbers and print them out.
我们所需要做的就是把数字列表循环起来，然后把它们打印出来。

75
00:05:43,990 --> 00:05:45,910
Let's run this and see what would happen.
让我们运行这个，看看会发生什么。

76
00:05:45,970 --> 00:05:51,190
Right click, Run As, Java Application. Cool!
右键单击，以运行方式运行，Java应用程序。酷！你可以看到现在所有的东西都被打印出来了！

77
00:05:51,190 --> 00:05:54,660
You can see that everything is now printed out to the console.
你可以看到，现在所有的东西都被打印到了控制台。

78
00:05:54,660 --> 00:05:57,720
As you can see in here in the traditional approach,
正如你在这里看到的，在传统的方法中、

79
00:05:57,720 --> 00:06:02,020
whenever we would want to solve a problem, we focus on the how.
每当我们想解决一个问题时，我们都会关注如何解决。

80
00:06:02,020 --> 00:06:04,380
The first thing we needed to do was, okay,
我们需要做的第一件事是，好的、

81
00:06:04,380 --> 00:06:05,260
I have a list of numbers.
我有一个数字列表。

82
00:06:05,270 --> 00:06:06,770
How do I loop around them?
我如何围绕它们进行循环？

83
00:06:06,770 --> 00:06:09,270
Okay, I'll use a For loop.
好的，我将使用一个For循环。

84
00:06:09,270 --> 00:06:14,600
That's the first thing that we did, when we were talking about the Structured approach.
这就是我们在讨论结构化方法时做的第一件事。

85
00:06:14,660 --> 00:06:18,130
Now, how do we solve the same thing in a functional approach?
现在，我们如何用函数式方法解决同样的问题？

86
00:06:18,140 --> 00:06:19,530
I'll keep you guessing.
我让你猜猜看。

87
00:06:19,590 --> 00:06:21,580
Let's see that in the next step.
让我们在下一个步骤中看看。

88
00:06:21,580 --> 00:06:22,580
Until then bye-bye.
在那之前，拜拜。

