1
00:00:01,800 --> 00:00:03,680
Welcome back!
欢迎回来!

2
00:00:03,690 --> 00:00:09,110
In the previous step, we solved the simple problem in a structured approach, and in this step we would
在上一步中，我们用结构化的方法解决了这个简单的问题，而在这一步中，我们将关注如何用功能化的方法解决这个问题。

3
00:00:09,110 --> 00:00:12,760
want to focus on how to solve it in a functional approach.
我们想把重点放在如何用功能方法来解决这个问题上。

4
00:00:12,760 --> 00:00:21,020
What I'll do is, I'll copy this file and paste it down here. I'll rename it to, FP01Functional.
我要做的是，复制这个文件并将其粘贴到这里。我将把它重命名为：FP01Functional。

5
00:00:21,020 --> 00:00:25,600
Let's open up FP01Functional and that's where we'll try and solve this problem.
让我们打开FP01Functional，这就是我们要尝试解决这个问题的地方。

6
00:00:25,600 --> 00:00:28,940
Let's start with renaming the method.
让我们从重命名该方法开始。

7
00:00:28,980 --> 00:00:34,920
Right click, Refactor, Rename, and I would want to rename this to
右键，重构，重命名，我想把它重命名为

8
00:00:34,920 --> 00:00:40,160
printAllNumbersInList, in a Functional approach. That's what we would want to do.
printAllNumbersInList，采用函数式方法。这就是我们想要做的。

9
00:00:40,160 --> 00:00:43,110
So, we'd want to print all the numbers in a Functional approach.
所以，我们想用函数式方法打印所有的数字。

10
00:00:43,140 --> 00:00:45,620
We have a list of numbers passed in.
我们有一个传入的数字列表。

11
00:00:45,620 --> 00:00:50,250
Now, how do we do this in a Functional approach?
现在，我们如何在函数式方法中做到这一点呢？

12
00:00:50,250 --> 00:00:57,180
One of the important things to remember is, in the functional approach, we will focus on, 'What to do?'
需要记住的一件事是，在函数式方法中，我们将专注于："做什么？

13
00:00:57,180 --> 00:00:59,420
Before we can focus on what to do,
在我们能够关注做什么之前、

14
00:00:59,430 --> 00:01:07,320
what we'd need to do is, we'd need to convert the list of numbers into a stream of numbers.
我们需要做的是，我们需要将数字列表转换成数字流。

15
00:01:07,320 --> 00:01:08,400
What does that mean?
那是什么意思？

16
00:01:08,400 --> 00:01:15,210
You can see, that the list of numbers is this. You'd want to convert this into a stream.
你可以看到，数字的列表是这样的。你想把它转换为一个流。

17
00:01:15,270 --> 00:01:18,620
So, I would want to convert it into a sequence of elements.
所以，我想把它转换成一个元素的序列。

18
00:01:18,630 --> 00:01:24,710
I would want to first get 12, then get 9, then get 13, then get 4,
我想首先得到12，然后得到9，然后得到13，然后得到4、

19
00:01:24,710 --> 00:01:27,150
and so on and so forth.
以此类推。

20
00:01:27,150 --> 00:01:33,650
So, we would want to convert whatever we have, into a stream of elements.
所以，我们想把我们拥有的任何东西转换成一个元素流。

21
00:01:33,650 --> 00:01:36,520
How do we convert a list into a stream?
我们如何将一个列表转换为一个流呢？

22
00:01:36,520 --> 00:01:45,080
The way we can do that is by; let's comment out this piece of code, Ctrl slash or Command slash,
我们可以这样做；让我们把这段代码注释出来，Ctrl斜线或Command斜线、

23
00:01:45,080 --> 00:01:50,680
and followed by Ctrl Shift F or Command Shift F to format it. Cool! That's commented out.
然后用Ctrl Shift F或Command Shift F来格式化它。酷！这就是注释！这就是注释出来的。

24
00:01:50,680 --> 00:01:56,160
We'd want to create a stream for numbers. So, numbers.stream.
我们想为数字创建一个流。所以，numbers.stream。

25
00:01:56,160 --> 00:02:02,950
As you can see in the Java doc, it says, "Returns a sequential Stream with this collection as its source."
正如你在Java文档中看到的，它说："返回一个以这个集合为源的连续的流"。

26
00:02:02,950 --> 00:02:08,220
So, we're taking a list and converting it into a stream of numbers.
所以，我们要把一个列表转换为一个数字流。

27
00:02:08,280 --> 00:02:12,860
So, we are converting it into individual numbers, which come one after the other;
所以，我们要把它转换成单个的数字，这些数字一个接一个地出现；

28
00:02:12,860 --> 00:02:18,720
a sequence of numbers: 12, 9, 13, 4. Once I have a stream of numbers,
一系列的数字： 12, 9, 13, 4. 一旦我有了一个数字流，我可以做的是指定每个数字的处理方法、

29
00:02:18,720 --> 00:02:23,660
what I can do is to specify, what to do with each one of them.
我可以做的是指定对每个数字做什么。

30
00:02:23,660 --> 00:02:28,740
So when I get 12, what needs to be done? When I get 9, what needs to be done?
因此，当我得到12时，需要做什么？当我得到9时，需要做什么？

31
00:02:28,740 --> 00:02:30,860
What do we want to do with each one of them?
我们想对它们中的每一个做什么？

32
00:02:30,870 --> 00:02:35,420
We'd want to do a System.out.println(number) right?
我们想做一个System.out.println(number)，对吗？

33
00:02:35,420 --> 00:02:43,170
So what we'll do is, we'll create a simple method, which accepts a parameter and prints it out.
所以我们要做的是，创建一个简单的方法，它接受一个参数并将其打印出来。

34
00:02:43,170 --> 00:02:45,690
So, let's create a simple method in here.
所以，让我们在这里创建一个简单的方法。

35
00:02:45,690 --> 00:02:49,200
So, I call this private static void.
所以，我把这个方法称为私有静态无效。

36
00:02:49,220 --> 00:02:53,280
I'll just call this, print and let's send
我将只是调用这个，打印并让我们发送

37
00:02:53,280 --> 00:02:55,580
in a int number to it.
输入一个数字。

38
00:02:55,580 --> 00:03:00,880
What this will do is, it will just do a System.out.println(number).
这将做的是，它将只是做一个System.out.println(number)。

39
00:03:00,880 --> 00:03:03,810
So, it just prints a single number, that's it.
所以，它只是打印出一个数字，仅此而已。

40
00:03:03,810 --> 00:03:05,490
Nothing more, nothing less.
没有别的，也没有别的。

41
00:03:05,490 --> 00:03:07,780
Now, what do we want to do over here?
现在，我们想在这里做什么？

42
00:03:07,780 --> 00:03:15,200
numbers.stream() for each number. For each of these numbers, for 12, for 9, for 13, for 4,
numbers.stream() 对于每个数字。对于每一个数字，12，9，13，4、

43
00:03:15,240 --> 00:03:17,920
we would want to call the print method.
我们想调用打印方法。

44
00:03:17,940 --> 00:03:19,980
How do we call the print method from here,
我们如何从这里调用打印方法、

45
00:03:19,980 --> 00:03:23,040
for each of the numbers? The way we can do that is by
的方法？我们可以这样做的方法是

46
00:03:23,040 --> 00:03:26,300
saying, forEach, and you can define;
说，forEach，你可以定义；

47
00:03:26,300 --> 00:03:30,180
I would want to call the print method. Now, over here,
我想调用打印方法。现在，在这里、

48
00:03:30,180 --> 00:03:33,600
typically what we'd do, we'll say print of 5.
通常我们会做什么，我们会说print of 5。

49
00:03:33,660 --> 00:03:35,980
Alright! So, typically what would happen?
好吧！那么，通常会发生什么呢？那么，通常会发生什么？

50
00:03:35,980 --> 00:03:37,840
This code would be immediately executed.
这段代码会被立即执行。

51
00:03:37,860 --> 00:03:41,380
We don't want the method to be immediately called. What we would want
我们不希望这个方法被立即调用。我们想做的是

52
00:03:41,380 --> 00:03:43,860
to do is to define, what needs to be done.
做的是定义需要做什么。

53
00:03:43,860 --> 00:03:48,360
We need to define the behavior, when we get a number of 12.
我们需要定义行为，当我们得到一个12的数字时。

54
00:03:48,360 --> 00:03:53,580
To define the behavior, we use something called a method reference.
为了定义这个行为，我们使用了一个叫做方法引用的东西。

55
00:03:53,580 --> 00:03:56,220
How do you put a method reference in?
你怎么把一个方法引用放进去？

56
00:03:56,220 --> 00:03:59,220
What we want to do is, for each element we'd want to call this print method.
我们要做的是，对于每个元素，我们要调用这个打印方法。

57
00:03:59,250 --> 00:04:04,710
How do we say that? The way we can say that is by using, the name of the class, colon,
我们怎么说呢？我们可以通过使用类的名称，冒号来表达、

58
00:04:04,710 --> 00:04:09,360
colon, followed by the name of the method.
冒号，然后是方法的名称。

59
00:04:09,360 --> 00:04:15,210
So, you can see that this is a static method and I'm using the class name colon, colon the name of the
所以，你可以看到这是一个静态方法，我使用了类的名称冒号，冒号，然后是方法的名称。

60
00:04:15,210 --> 00:04:21,210
static method. And what I'm telling it is, hey! take the numbers, convert in into a stream,
静态方法。我告诉它的是，嘿！把这些数字，转换为一个流、

61
00:04:21,210 --> 00:04:26,110
and for each element; for 12 do a print, for 9 do a print.
对每一个元素；对12做一个打印，对9做一个打印。

62
00:04:26,110 --> 00:04:28,690
That's basically, what we are specifying in here.
基本上，这就是我们在这里指定的内容。

63
00:04:28,690 --> 00:04:36,350
Now, I think we have got almost everything covered. So let's do Right click, Run As, Java Application.
现在，我想我们已经得到了几乎所有的东西。所以，让我们点击右键，以运行方式运行，Java应用程序。

64
00:04:36,350 --> 00:04:38,060
Aha! The output does not really change.
啊哈！输出并没有真正改变。

65
00:04:38,060 --> 00:04:43,520
You can see that, everything is being printed out in a sequence.
你可以看到，所有的东西都是按顺序打印出来的。

66
00:04:43,520 --> 00:04:47,010
Let's end this step by reviewing quickly, what's happening with this code.
让我们快速回顾一下这一步，这段代码发生了什么。

67
00:04:47,030 --> 00:04:50,110
What we are doing is, we are converting the numbers list into a stream.
我们正在做的是，我们正在将数字列表转换成一个流。

68
00:04:50,110 --> 00:04:54,900
So instead of getting a list like this, what we'll get is, a stream of elements like this.
所以我们得到的不是这样的一个列表，而是这样的一个元素流。

69
00:04:54,980 --> 00:05:00,710
And what we are specifying is, for each of these elements which are coming out, what we would want to
我们所指定的是，对于每一个出来的元素，我们想做的是

70
00:05:00,710 --> 00:05:06,780
do is, to call the print method which is present in the current class.
是，调用当前类中的打印方法。

71
00:05:06,780 --> 00:05:10,340
And the syntax which we are using in here is, colon, colon.
我们在这里使用的语法是，冒号，冒号。

72
00:05:10,340 --> 00:05:14,780
This is the syntax of something called a Method Reference.
这是一种叫做方法引用的语法。

73
00:05:14,780 --> 00:05:19,620
What we are saying in here is, for each element, this method needs to be called.
我们在这里说的是，对于每个元素，这个方法都需要被调用。

74
00:05:19,640 --> 00:05:26,400
So, for each of the numbers coming up, what would happen is, this print method would get executed
所以，对于每一个出现的数字，会发生什么，这个打印方法会被执行

75
00:05:26,400 --> 00:05:31,220
and that's how we were seeing all the elements that are printed.
这就是我们如何看到所有被打印的元素。

76
00:05:31,220 --> 00:05:34,940
I'm sure there are a lot of questions about this specific approach.
我相信有很多关于这个具体方法的问题。

77
00:05:34,940 --> 00:05:38,140
Hold onto them, and I'll see you in the next step.
请抓紧时间，我们在下一步见。

