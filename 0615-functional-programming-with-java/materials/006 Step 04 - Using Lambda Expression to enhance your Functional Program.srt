1
00:00:02,300 --> 00:00:04,300
Welcome back!
欢迎回来!

2
00:00:04,300 --> 00:00:09,360
In the previous step, we solved the problem for printing even numbers in a Functional approach.
在上一步骤中，我们用函数式方法解决了打印偶数的问题。

3
00:00:09,360 --> 00:00:14,200
However, we needed to create a separate method, isEven.
然而，我们需要创建一个单独的方法，isEven。

4
00:00:14,200 --> 00:00:19,640
We saw that the logic for this method is very very simple, and we had to do a lot of ceremony.
我们看到这个方法的逻辑非常非常简单，而我们不得不做很多仪式。

5
00:00:19,640 --> 00:00:25,620
We had to add in a lot of detail to define the method and call it from here.
我们不得不加入很多细节来定义这个方法并从这里调用它。

6
00:00:25,620 --> 00:00:27,690
Is there a simpler way of doing it?
有没有一个更简单的方法呢？

7
00:00:27,690 --> 00:00:30,490
Let's look at it right now.
让我们现在就来看看。

8
00:00:30,490 --> 00:00:36,270
The simpler way of defining this specific thing is called a Lambda Expression.
定义这个特定事物的更简单的方法叫做Lambda表达式。

9
00:00:36,270 --> 00:00:42,480
So, what I'll do is, I'll comment this and I'll say .filter and over here,
所以，我将做的是，我将注释这个，我将说.filter和over here、

10
00:00:42,480 --> 00:00:49,270
what do we want to do is, we would want to define a Lambda Expression. So, what is a Lambda Expression?
我们要做的是，我们要定义一个Lambda表达式。那么，什么是Lambda表达式？

11
00:00:49,270 --> 00:00:55,520
A Lambda Expression is nothing but a simpler way of defining another method.
兰姆达表达式只不过是定义另一个方法的一种更简单的方式。

12
00:00:55,520 --> 00:00:57,740
So, Lambda Expression is nothing but a method.
所以，Lambda Expression只不过是一个方法。

13
00:00:57,740 --> 00:00:58,900
Very very simple.
非常非常简单。

14
00:00:58,900 --> 00:01:06,300
However, in the Lambda Expression, you'd use a simpler syntax for creating this method.
然而，在Lambda Expression中，你会使用一种更简单的语法来创建这个方法。

15
00:01:06,310 --> 00:01:09,190
What does this method accept as a parameter?
这个方法接受什么作为参数？

16
00:01:09,190 --> 00:01:10,900
Let's start with that.
让我们从这个开始。

17
00:01:10,900 --> 00:01:15,120
So, this method accepts number as the parameter, right?
那么，这个方法接受数字作为参数，对吗？

18
00:01:15,120 --> 00:01:21,820
So, what do we want to do is, we'd want to take number as the parameter and we would want to check.
那么，我们要做的是，我们要把数字作为参数，然后我们要检查。

19
00:01:21,820 --> 00:01:23,040
What do we want to check?
我们要检查什么？

20
00:01:23,040 --> 00:01:26,960
We'd want to check, if number mod 2 == 0.
我们想检查，如果number mod 2 == 0。

21
00:01:26,980 --> 00:01:31,360
So, we would want to take a number and we would want to check, if
所以，我们要取一个数字，然后检查，如果

22
00:01:31,360 --> 00:01:36,460
number mod 2 == 0, and return it back.
number mod 2 == 0，并将其返回。

23
00:01:36,480 --> 00:01:44,260
And this is something of a special kind of a syntax related to Lambda Expression.
这是与Lambda Expression有关的一种特殊语法。

24
00:01:44,260 --> 00:01:46,840
It's hyphen, followed by greater than symbol.
它是连字符，后面是大于符号。

25
00:01:46,840 --> 00:01:49,590
So, this is almost like an arrow symbol.
所以，这几乎就是一个箭头符号。

26
00:01:49,590 --> 00:01:57,160
So, what we are saying in here is, take the number in. So, take the number and check if number mod 2 == 0
所以，我们在这里说的是，把这个数字拿进去。所以，取数字并检查数字的模数2是否==0

27
00:01:57,160 --> 00:02:02,160
and return it back. By default, in Lambda Expressions, if you just have
并将其返回。默认情况下，在Lambda表达式中，如果你只是有

28
00:02:02,160 --> 00:02:05,740
one statement present, it will return that value back.
一条语句，它就会返回这个值。

29
00:02:05,740 --> 00:02:07,390
So, what would happen in here?
那么，在这里会发生什么？

30
00:02:07,390 --> 00:02:12,790
It takes the number and returns the value of  number mod 2 == 0.
它接收数字并返回number mod 2 == 0的值。

31
00:02:12,790 --> 00:02:14,290
How do I use it in our code?
我如何在我们的代码中使用它？

32
00:02:14,290 --> 00:02:20,400
I just need to copy this and put it in between parenthesis of filter.
我只需要复制这个，把它放在过滤器的括号之间。

33
00:02:20,400 --> 00:02:26,160
So, what we are defending in here is, saying number, for each number,
所以，我们在这里所做的辩护是，说数字，对于每个数字、

34
00:02:26,160 --> 00:02:31,040
for each number, what do we want to do? Check, if number mod 2 == 0.
对于每个数字，我们要做什么？检查，如果number mod 2 == 0。

35
00:02:31,040 --> 00:02:35,080
If number mod 2 == 0, then return True back.
如果number mod 2 == 0，那么返回True。

36
00:02:35,080 --> 00:02:37,550
Otherwise, return False back.
否则，返回False。

37
00:02:37,570 --> 00:02:39,570
Let's see what would happen. Cool!
让我们看看会发生什么。很好!

38
00:02:39,570 --> 00:02:44,860
No change in output, but you can see that now the code is much much more simpler,
输出没有变化，但是你可以看到，现在的代码要简单得多、

39
00:02:44,860 --> 00:02:48,720
because I don't really need to worry about this method anymore.
因为我真的不需要再担心这个方法了。

40
00:02:48,720 --> 00:02:53,140
So, this method can be commented out and all logic that we have right now;
所以，这个方法可以被注释掉，而我们现在拥有的所有逻辑；

41
00:02:53,140 --> 00:02:56,180
I'll move this line of code a little below.
我将把这行代码移到下面一点。

42
00:02:56,180 --> 00:03:01,340
So, the logic that we have right now is to convert the list of numbers into a stream
所以，我们现在的逻辑是将数字列表转换成一个流

43
00:03:01,340 --> 00:03:04,500
and for each of the numbers execute the filter.
并对每个数字执行过滤器。

44
00:03:04,510 --> 00:03:05,670
So, is this condition True?
那么，这个条件是真的吗？

45
00:03:05,670 --> 00:03:12,550
If the condition is True, then go ahead and do the print. As you can see in here, with functional programming,
如果条件是 "真"，那么就继续做打印。正如你在这里看到的，用函数式编程、

46
00:03:12,550 --> 00:03:14,660
we are focusing on the, 'What to do?'.
我们专注于 "做什么"。

47
00:03:14,680 --> 00:03:21,020
For each element, what to check? You are checking that the number is even.
对于每个元素，要检查什么？你正在检查这个数字是否是偶数。

48
00:03:21,020 --> 00:03:24,680
For each element, what to do if the condition is True.
对于每个元素，如果条件为真，该怎么做？

49
00:03:24,680 --> 00:03:29,650
We would want to print it out. The thing which we learned in this specific step is something called a
我们想把它打印出来。在这个具体步骤中，我们学到的东西叫做

50
00:03:29,650 --> 00:03:31,270
Lambda Expression.
兰姆达表达式。

51
00:03:31,270 --> 00:03:38,290
So, Lambda Expression, as we discussed, is a simplified representation of the method.
所以，Lambda表达式，正如我们所讨论的，是方法的简化表示。

52
00:03:38,290 --> 00:03:40,820
So over here, we had a method called isEven,
所以在这里，我们有一个叫做isEven的方法、

53
00:03:40,820 --> 00:03:43,380
which was returning number mod 2 == 0.
它的返回结果是数字mod 2 == 0。

54
00:03:43,380 --> 00:03:48,850
We just used the same logic in here, in much more simpler syntax.
我们只是在这里用同样的逻辑，用更简单的语法。

55
00:03:48,850 --> 00:03:54,520
If this is the first Lambda Expression that you wrote, the syntax might look a little weird, little new,
如果这是你写的第一个Lambda Expression，那么这个语法可能看起来有点奇怪，有点新鲜、

56
00:03:54,520 --> 00:03:58,980
and all that. Don't worry, we will be writing a number of Lambda Expressions in the
和所有这些。别担心，我们将在随后的步骤中编写大量的Lambda表达式。

57
00:03:58,980 --> 00:04:02,180
subsequent steps and you'd really get comfortable with them.
我们将在随后的步骤中编写大量的Lambda表达式，你会真正适应它们的。

58
00:04:02,180 --> 00:04:06,600
Let's quickly review the important concepts that we have learned until now.
让我们快速回顾一下到目前为止我们所学到的重要概念。

59
00:04:06,600 --> 00:04:08,660
Number one, with functional programming,
第一，对于函数式编程，我们关注的是做什么、

60
00:04:08,660 --> 00:04:10,840
we focus on what to do.
我们专注于做什么。

61
00:04:10,840 --> 00:04:15,380
We convert the numbers into a stream and for each element in that stream,
我们将数字转换成一个流，对于该流中的每个元素、

62
00:04:15,380 --> 00:04:17,680
we specify what needs to be done.
我们指定需要做什么。

63
00:04:17,680 --> 00:04:20,480
A stream is nothing but a sequence of elements.
一个流只不过是一个元素的序列。

64
00:04:20,480 --> 00:04:25,240
For each element, we would want to call the isEven method in here
对于每个元素，我们想在这里调用isEven方法

65
00:04:25,240 --> 00:04:29,330
and we use a method reference to define that in here.
我们在这里使用一个方法引用来定义它。

66
00:04:29,340 --> 00:04:32,860
The other approach to defining what needs to be done
另一种方法是定义需要对每个数字做什么

67
00:04:32,860 --> 00:04:37,060
with each number, is something called a Lambda Expression. With a Lambda Expression,
的另一种方法是用一个叫做Lambda Expression的东西来定义需要对每个数字做什么。使用Lambda表达式、

68
00:04:37,060 --> 00:04:42,070
you can define the entire code directly in here. With a method reference,
你可以直接在这里定义整个代码。用一个方法引用、

69
00:04:42,070 --> 00:04:45,670
we are actually referring to a method which is defined somewhere else.
我们实际上是在引用一个在其他地方定义的方法。

70
00:04:45,670 --> 00:04:53,150
However, with the Lambda Expression, we are actually defining the complete logic of the method right here.
然而，通过Lambda表达式，我们实际上是在这里定义了方法的完整逻辑。

71
00:04:53,170 --> 00:04:58,240
I hope you are having a lot of fun and I'm sure a lot of these concepts are new
我希望你玩得很开心，我相信这些概念有很多都是新的。

72
00:04:58,240 --> 00:05:03,260
and as I said earlier, FP, functional programming, is actually a paradigm shift.
正如我之前所说，FP，函数式编程，实际上是一种范式的转变。

73
00:05:03,260 --> 00:05:07,320
So, it will take some time for you to get adjusted to this.
所以，你需要一些时间来适应这个。

74
00:05:07,360 --> 00:05:10,160
So, follow along and keep watching the next steps
所以，请跟随并继续关注接下来的步骤

75
00:05:10,160 --> 00:05:13,960
and I'm sure you'll be learning a lot about functional programming.
我相信你会学到很多关于函数式编程的知识。

76
00:05:13,960 --> 00:05:14,930
I'll see you in the next step.
我们下一步见。

77
00:05:14,960 --> 00:05:15,760
Until then bye-bye.
在那之前，拜拜。

