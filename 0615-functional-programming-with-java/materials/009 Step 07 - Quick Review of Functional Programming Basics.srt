1
00:00:01,320 --> 00:00:02,970
Welcome back.
欢迎回来。

2
00:00:03,000 --> 00:00:08,190
Before we move into the next section, let's review some of the important concepts that we have learned
在我们进入下一节之前，让我们回顾一下我们在本节学到的一些重要概念

3
00:00:08,370 --> 00:00:10,500
in this specific section.
在本节中所学到的一些重要概念。

4
00:00:10,500 --> 00:00:17,580
The first thing that we have learnt is, in Functional programming we focus on specifying what to do.
我们学到的第一件事是，在函数式编程中，我们专注于指定要做什么。

5
00:00:18,300 --> 00:00:22,000
First of all, we converted the List to a stream.
首先，我们将List转换为一个流。

6
00:00:22,140 --> 00:00:24,380
So, this is a sequence of elements
所以，这是一个元素的序列

7
00:00:24,380 --> 00:00:28,350
and for each element what should be done. Allow it,
以及对每个元素应该做什么。允许它、

8
00:00:28,640 --> 00:00:37,000
if it's only an odd number. Print the element out to the console. Do a cube of the number.
如果它只是一个奇数。将该元素打印到控制台。做一个数字的立方体。

9
00:00:37,370 --> 00:00:43,820
So, for each element in this stream, we specified what needs to be done with it.
所以，对于这个流中的每个元素，我们指定了需要对它做什么。

10
00:00:43,880 --> 00:00:50,480
We used numbers.stream() to convert a list into a stream and then we looked at a couple of important
我们用numbers.stream()将一个列表转换成一个流，然后我们看了几个重要的

11
00:00:50,480 --> 00:00:52,170
methods on the stream.
方法。

12
00:00:52,220 --> 00:00:57,470
We looked at filter which allows us to specify a condition. Only if
我们看了过滤器，它允许我们指定一个条件。只有当

13
00:00:57,470 --> 00:01:01,830
that condition is matched, then the element would go further.
该条件被匹配，那么该元素将被进一步处理。

14
00:01:02,060 --> 00:01:05,550
Otherwise, this element would be filtered out.
否则，这个元素就会被过滤掉。

15
00:01:05,570 --> 00:01:12,410
So, if I have a list of numbers and I would want to allow only even numbers to go through or odd numbers
所以，如果我有一个数字列表，我想只允许偶数通过或奇数

16
00:01:12,410 --> 00:01:18,830
to go through, then I can define a filter specifying what is the condition that needs to be checked on
通过，那么我可以定义一个过滤器，指定需要对数字进行检查的条件是什么。

17
00:01:18,830 --> 00:01:23,940
the number. forEach is used to consume an element.
forEach是用来消耗一个元素的。

18
00:01:23,950 --> 00:01:27,010
You take an element and print it.
你取一个元素并打印它。

19
00:01:27,110 --> 00:01:30,480
That's what this specific thing helps us to do.
这就是这个具体的东西帮助我们做的事情。

20
00:01:30,600 --> 00:01:35,540
We use map to map one value to another value.
我们使用map来将一个值映射到另一个值。

21
00:01:35,540 --> 00:01:41,780
So over here, we took the number and we did a cube of it, number * number * number.
所以在这里，我们把数字拿出来，做了一个立方体，数字*数字*数字。

22
00:01:41,810 --> 00:01:45,530
The other things which we looked at were Lambda Expressions.
我们看的其他东西是Lambda表达式。

23
00:01:45,530 --> 00:01:55,170
You can see that filter, over here, uses a lambda expression. The map over here, uses another lambda expression.
你可以看到过滤器，在这里，使用一个Lambda表达式。这边的地图，使用了另一个Lambda表达式。

24
00:01:55,170 --> 00:02:02,720
Over here, we are using a lambda expression to take a course and append the course.length() to it.
在这里，我们正在使用一个lambda表达式来获取一个课程，并将课程.length()附加到它上面。

25
00:02:02,900 --> 00:02:09,490
We learnt that lambda expression is nothing but a simplified representation of a method.
我们学过，λ表达式只不过是一个方法的简化表示。

26
00:02:09,530 --> 00:02:16,070
So, this lambda expression over here which takes a number and returns if it's even, is similar to the method
所以，这里的这个lambda表达式接收一个数字并返回是否为偶数，类似于方法

27
00:02:16,100 --> 00:02:23,120
which we wrote in here. It takes a parameter called number and it returns if that specific number is
我们在这里写的。它接受一个名为number的参数，并返回该特定数字是否为

28
00:02:23,360 --> 00:02:30,810
even. So, instead of writing this much amount of code, we would write a simple lambda expression.
偶数。所以，与其写这么多的代码，我们不如写一个简单的lambda表达式。

29
00:02:30,860 --> 00:02:38,350
We also looked at Method References. Until now, we have used method references to call static methods.
我们还看了方法引用。到目前为止，我们已经使用方法引用来调用静态方法。

30
00:02:38,570 --> 00:02:42,490
println is a static method on System.out.
println是System.out的一个静态方法。

31
00:02:42,810 --> 00:02:49,910
So, we are saying, on the element call System.out.println element. And we use the method reference
所以，我们在说，在元素上调用System.out.println元素。而我们使用方法引用

32
00:02:49,910 --> 00:02:56,130
to specify that. We also created method references using custom static methods.
来指定。我们还使用自定义静态方法创建了方法引用。

33
00:02:56,210 --> 00:03:00,470
We created a method called isEven and we use the class name
我们创建了一个叫做isEven的方法，我们使用类名

34
00:03:00,470 --> 00:03:06,380
: : isEven to call it. If you have not started doing the hands-on yet, I would recommend you to get
: isEven来调用它。如果你还没有开始动手实践，我建议你动手

35
00:03:06,380 --> 00:03:11,000
your hands dirty and write as many functional programs as possible.
如果你还没有开始动手操作，我建议你动手写尽可能多的功能程序。

36
00:03:11,000 --> 00:03:12,350
I'll see you in the next section.
我们在下一节再见。

37
00:03:12,360 --> 00:03:13,190
Until then, bye bye.
在那之前，拜拜了。

