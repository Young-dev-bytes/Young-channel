1
00:00:02,740 --> 00:00:04,540
Welcome back.

2
00:00:04,990 --> 00:00:11,980
In the last two steps, we implemented a simple problem in a structured approach and the functional approach

3
00:00:12,370 --> 00:00:19,230
and you might be thinking now that the functional approach is much more complex than this structured

4
00:00:19,240 --> 00:00:20,230
approach.

5
00:00:20,230 --> 00:00:25,300
And that's true with the implementation that we have right now.

6
00:00:25,930 --> 00:00:31,040
Let's see what we can do to simplify the implementation that we have.

7
00:00:31,450 --> 00:00:35,060
So, let's first remove all this stuff that we have in here.

8
00:00:35,200 --> 00:00:40,960
So, let's actually remove the earlier code that we have inside the functional method.

9
00:00:40,970 --> 00:00:49,720
I'm using Ctrl D or command D to remove a line and now let's see the need for this specific print method.

10
00:00:49,720 --> 00:00:56,600
What we are doing in here is, we would want to call FP Functional colon colon print.

11
00:00:57,120 --> 00:01:01,060
We would want to call a static method in this specific class.

12
00:01:01,560 --> 00:01:07,660
And what happens is, for each element in this stream, this static method is called with that element.

13
00:01:07,660 --> 00:01:10,150
So, this stream contains a list of numbers.

14
00:01:10,180 --> 00:01:12,790
So, first 12 is sent to this method,

15
00:01:12,820 --> 00:01:15,040
next nine is sent to this method,

16
00:01:15,040 --> 00:01:19,020
next 13 is sent to this method and we saw everything is printed out to the console.

17
00:01:19,050 --> 00:01:20,020
That's cool.

18
00:01:20,020 --> 00:01:27,480
Now, instead of doing this, you can actually replace this piece of code by directly specifying System.out

19
00:01:27,480 --> 00:01:28,360
in here.

20
00:01:28,930 --> 00:01:33,050
So, System.out and what is this static method? println.

21
00:01:33,640 --> 00:01:43,330
So, System.out contains a static method called println and that's a easier way of doing it. Instead

22
00:01:43,330 --> 00:01:45,220
of creating a new method called print,

23
00:01:45,280 --> 00:01:49,450
what we can do is, directly call System.out::println.

24
00:01:49,480 --> 00:01:53,140
And now, this method is no longer needed.

25
00:01:53,140 --> 00:01:54,460
So, let's comment it out.

26
00:01:55,760 --> 00:02:03,070
Now, you can see that this piece of code is a little more simpler than the structured approach.

27
00:02:03,090 --> 00:02:04,650
Why do I call it simpler?

28
00:02:04,680 --> 00:02:10,730
Because in this Structured approach, we had to focus on how to loop the numbers and then print them. In

29
00:02:10,810 --> 00:02:11,750
the Functional approach,

30
00:02:11,750 --> 00:02:17,930
on the other hand, we get a list of elements and we define what to do with each one of them.

31
00:02:17,930 --> 00:02:23,940
So, all that we needed to do is to say for each element in this stream, do this. Now,

32
00:02:24,290 --> 00:02:29,190
let's try and make the example that we have little bit more complex.

33
00:02:29,430 --> 00:02:35,430
What I want to do is, I would want to go to the FP Structured class and what I would want to do is to

34
00:02:35,430 --> 00:02:37,950
print only the even numbers.

35
00:02:37,950 --> 00:02:42,390
I don't want to print all the numbers in the list but I only want to print the even numbers in the list.

36
00:02:42,780 --> 00:02:44,660
So, instead of saying print all numbers in the list,

37
00:02:44,690 --> 00:02:49,410
I only want to say print even numbers in the list structured.

38
00:02:50,430 --> 00:02:54,060
How do we change this code to print even numbers in the list?

39
00:02:54,060 --> 00:02:55,440
Think about it.

40
00:02:55,440 --> 00:03:03,210
Typically, what we do is, we would add the logic in here. So, we'll say, if this is even, only then print

41
00:03:03,360 --> 00:03:05,820
the number out, right?

42
00:03:05,850 --> 00:03:07,230
So, let's do that.

43
00:03:07,230 --> 00:03:08,580
So, if even,

44
00:03:08,580 --> 00:03:12,670
how can I check that the number is even? If(number), we can divide

45
00:03:12,720 --> 00:03:17,490
by two. So number%2==0.

46
00:03:17,520 --> 00:03:22,770
So, we are dividing by two and checking the remainder. So, number%2 divides the number by two and checks

47
00:03:22,770 --> 00:03:23,370
the remainder.

48
00:03:23,400 --> 00:03:27,780
If it's zero,  then what do we want to do? Yes, we would want to print the number out.

49
00:03:28,540 --> 00:03:30,930
So, let's format this out.

50
00:03:31,120 --> 00:03:39,630
And now, if I call this, so printEvenNumbersInListStructured, I can copy and paste this in but then

51
00:03:39,630 --> 00:03:41,670
I would be repeating the list.

52
00:03:41,670 --> 00:03:42,810
I don't really want to do that.

53
00:03:42,810 --> 00:03:48,810
So, what we'll do is, let's extract this list to a local variable. So, right-click, List factor, extract to

54
00:03:48,810 --> 00:03:57,300
a local variable and local variable that I would want to create is numbers and over here, what we want

55
00:03:57,300 --> 00:04:02,430
to do is, we would want to print all the even numbers in the list. Right.

56
00:04:02,450 --> 00:04:04,230
So, that's basically what we want to do.

57
00:04:04,230 --> 00:04:13,780
So we are using the Structured approach and let's run as Java Application. What would happen? Cool. Only the even

58
00:04:13,780 --> 00:04:15,390
numbers are getting printed.

59
00:04:15,550 --> 00:04:19,600
Now how do we do the same thing in a Functional approach?

60
00:04:19,600 --> 00:04:25,570
How do I do that in a FP01functional class? Let's see how to do that right now.

61
00:04:25,910 --> 00:04:28,730
So, I'll copy the existing method. As usual,

62
00:04:28,730 --> 00:04:35,420
I'll call this printEvenNumbersInListFunctional and over here,

63
00:04:35,440 --> 00:04:44,920
what we want to do is, we'd want to only look at the numbers which are even. So how do I add additional logic

64
00:04:44,920 --> 00:04:53,190
in here. I can add a Filter in here. I'll say, only allow even numbers.

65
00:04:53,260 --> 00:04:58,430
How can I add a Filter? The way I can do that is by saying .filter.

66
00:04:59,050 --> 00:05:06,160
Now, how do I decide if something is even? Let's create a static method for it, for now. I'll call this private

67
00:05:06,160 --> 00:05:16,560
static, this return whether it's even or not. So I'll say boolean, private static boolean isEven

68
00:05:16,570 --> 00:05:18,120
and let's pass the number to it.

69
00:05:18,150 --> 00:05:24,200
So, int number and this would return.

70
00:05:24,200 --> 00:05:25,190
What does it return?

71
00:05:25,190 --> 00:05:27,400
number%2

72
00:05:27,400 --> 00:05:29,000
is equal to, is equal to zero.

73
00:05:30,450 --> 00:05:31,500
This is simple logic. Right?

74
00:05:31,530 --> 00:05:36,730
All that it does is, it divides the number by two, checks the remainder, and if the remainder is zero, it returns a

75
00:05:36,740 --> 00:05:37,310
'true' back.

76
00:05:37,320 --> 00:05:39,400
Otherwise it returns a 'false' back.

77
00:05:39,400 --> 00:05:44,180
What do you want to do is, we would want to call this method on each of these numbers.

78
00:05:44,190 --> 00:05:49,950
And only if it is true, we'd want to print the number. So you'd want to do a forEach,

79
00:05:49,980 --> 00:05:51,560
only for the numbers

80
00:05:51,630 --> 00:05:54,390
where isEven is returning true.

81
00:05:54,390 --> 00:05:56,480
How do we do that in the Functional approach?

82
00:05:56,480 --> 00:05:58,860
The way we can do that is by creating a filter.

83
00:05:58,890 --> 00:06:04,840
So I said .filter and over here, I can say isEven.

84
00:06:04,980 --> 00:06:12,630
And because this is a static method, the way we can define that is by using a method reference FP01

85
00:06:12,630 --> 00:06:14,160
Functional colon

86
00:06:14,160 --> 00:06:20,980
colon isEven. The important thing in the method reference is that we are not really calling it, we are

87
00:06:20,980 --> 00:06:25,240
not really calling it. We are just saying, okay, this is a method to be called.

88
00:06:25,240 --> 00:06:33,550
We are declaring that this is a method to be called on each of the numbers and if it returns true back,

89
00:06:34,030 --> 00:06:36,130
only then go to the next line of code.

90
00:06:36,520 --> 00:06:46,790
So, let's move this comment out, down to this side and let's now execute this. Let's quickly create a local

91
00:06:46,790 --> 00:06:54,170
variable for this list as well, numbers. And what we want to do is, copy this and we would want to print

92
00:06:54,620 --> 00:06:56,030
even numbers in the list.

93
00:06:56,030 --> 00:06:57,780
Let's comment this out.

94
00:06:57,780 --> 00:07:01,000
Let's quickly run this and see what would happen.

95
00:07:01,280 --> 00:07:02,990
Do we get only even numbers?

96
00:07:02,990 --> 00:07:03,600
Yup.

97
00:07:03,830 --> 00:07:05,560
That's cool.

98
00:07:05,680 --> 00:07:10,070
Now, we saw that we were able to print all the even numbers in the list.

99
00:07:10,610 --> 00:07:17,780
Once again, you can see the fact that once we have a stream of numbers, all that we needed to do was add

100
00:07:17,780 --> 00:07:18,430
a check.

101
00:07:18,440 --> 00:07:27,020
So, for each number, do this check. If that check is true, then you can actually go ahead and print the

102
00:07:27,170 --> 00:07:28,330
number out.

103
00:07:28,820 --> 00:07:34,880
Now, again you might be thinking that this method is a little bit more complex than this structured approach

104
00:07:35,180 --> 00:07:40,160
because we needed to use a method called isEven.

105
00:07:40,430 --> 00:07:43,630
How would it be, if I can actually directly define the entire

106
00:07:43,630 --> 00:07:46,570
isEven method in here.

107
00:07:47,480 --> 00:07:53,240
Instead of actually creating a separate method, having a return value, having the parameters defined,

108
00:07:53,510 --> 00:07:59,690
having the body, having the return and all that, can we do it in a simpler way and directly define the

109
00:07:59,690 --> 00:08:01,310
method in here.

110
00:08:01,790 --> 00:08:05,380
Let's look at that in the subsequent step. Until then,

111
00:08:05,530 --> 00:08:06,030
bye, bye.
