1
00:00:02,300 --> 00:00:04,300
Welcome back!

2
00:00:04,300 --> 00:00:09,360
In the previous step, we solved the problem for printing even numbers in a Functional approach.

3
00:00:09,360 --> 00:00:14,200
However, we needed to create a separate method, isEven.

4
00:00:14,200 --> 00:00:19,640
We saw that the logic for this method is very very simple, and we had to do a lot of ceremony.

5
00:00:19,640 --> 00:00:25,620
We had to add in a lot of detail to define the method and call it from here.

6
00:00:25,620 --> 00:00:27,690
Is there a simpler way of doing it?

7
00:00:27,690 --> 00:00:30,490
Let's look at it right now.

8
00:00:30,490 --> 00:00:36,270
The simpler way of defining this specific thing is called a Lambda Expression.

9
00:00:36,270 --> 00:00:42,480
So, what I'll do is, I'll comment this and I'll say .filter and over here,

10
00:00:42,480 --> 00:00:49,270
what do we want to do is, we would want to define a Lambda Expression. So, what is a Lambda Expression?

11
00:00:49,270 --> 00:00:55,520
A Lambda Expression is nothing but a simpler way of defining another method.

12
00:00:55,520 --> 00:00:57,740
So, Lambda Expression is nothing but a method.

13
00:00:57,740 --> 00:00:58,900
Very very simple.

14
00:00:58,900 --> 00:01:06,300
However, in the Lambda Expression, you'd use a simpler syntax for creating this method.

15
00:01:06,310 --> 00:01:09,190
What does this method accept as a parameter?

16
00:01:09,190 --> 00:01:10,900
Let's start with that.

17
00:01:10,900 --> 00:01:15,120
So, this method accepts number as the parameter, right?

18
00:01:15,120 --> 00:01:21,820
So, what do we want to do is, we'd want to take number as the parameter and we would want to check.

19
00:01:21,820 --> 00:01:23,040
What do we want to check?

20
00:01:23,040 --> 00:01:26,960
We'd want to check, if number mod 2 == 0.

21
00:01:26,980 --> 00:01:31,360
So, we would want to take a number and we would want to check, if

22
00:01:31,360 --> 00:01:36,460
number mod 2 == 0, and return it back.

23
00:01:36,480 --> 00:01:44,260
And this is something of a special kind of a syntax related to Lambda Expression.

24
00:01:44,260 --> 00:01:46,840
It's hyphen, followed by greater than symbol.

25
00:01:46,840 --> 00:01:49,590
So, this is almost like an arrow symbol.

26
00:01:49,590 --> 00:01:57,160
So, what we are saying in here is, take the number in. So, take the number and check if number mod 2 == 0

27
00:01:57,160 --> 00:02:02,160
and return it back. By default, in Lambda Expressions, if you just have

28
00:02:02,160 --> 00:02:05,740
one statement present, it will return that value back.

29
00:02:05,740 --> 00:02:07,390
So, what would happen in here?

30
00:02:07,390 --> 00:02:12,790
It takes the number and returns the value of  number mod 2 == 0.

31
00:02:12,790 --> 00:02:14,290
How do I use it in our code?

32
00:02:14,290 --> 00:02:20,400
I just need to copy this and put it in between parenthesis of filter.

33
00:02:20,400 --> 00:02:26,160
So, what we are defending in here is, saying number, for each number,

34
00:02:26,160 --> 00:02:31,040
for each number, what do we want to do? Check, if number mod 2 == 0.

35
00:02:31,040 --> 00:02:35,080
If number mod 2 == 0, then return True back.

36
00:02:35,080 --> 00:02:37,550
Otherwise, return False back.

37
00:02:37,570 --> 00:02:39,570
Let's see what would happen. Cool!

38
00:02:39,570 --> 00:02:44,860
No change in output, but you can see that now the code is much much more simpler,

39
00:02:44,860 --> 00:02:48,720
because I don't really need to worry about this method anymore.

40
00:02:48,720 --> 00:02:53,140
So, this method can be commented out and all logic that we have right now;

41
00:02:53,140 --> 00:02:56,180
I'll move this line of code a little below.

42
00:02:56,180 --> 00:03:01,340
So, the logic that we have right now is to convert the list of numbers into a stream

43
00:03:01,340 --> 00:03:04,500
and for each of the numbers execute the filter.

44
00:03:04,510 --> 00:03:05,670
So, is this condition True?

45
00:03:05,670 --> 00:03:12,550
If the condition is True, then go ahead and do the print. As you can see in here, with functional programming,

46
00:03:12,550 --> 00:03:14,660
we are focusing on the, 'What to do?'.

47
00:03:14,680 --> 00:03:21,020
For each element, what to check? You are checking that the number is even.

48
00:03:21,020 --> 00:03:24,680
For each element, what to do if the condition is True.

49
00:03:24,680 --> 00:03:29,650
We would want to print it out. The thing which we learned in this specific step is something called a

50
00:03:29,650 --> 00:03:31,270
Lambda Expression.

51
00:03:31,270 --> 00:03:38,290
So, Lambda Expression, as we discussed, is a simplified representation of the method.

52
00:03:38,290 --> 00:03:40,820
So over here, we had a method called isEven,

53
00:03:40,820 --> 00:03:43,380
which was returning number mod 2 == 0.

54
00:03:43,380 --> 00:03:48,850
We just used the same logic in here, in much more simpler syntax.

55
00:03:48,850 --> 00:03:54,520
If this is the first Lambda Expression that you wrote, the syntax might look a little weird, little new,

56
00:03:54,520 --> 00:03:58,980
and all that. Don't worry, we will be writing a number of Lambda Expressions in the

57
00:03:58,980 --> 00:04:02,180
subsequent steps and you'd really get comfortable with them.

58
00:04:02,180 --> 00:04:06,600
Let's quickly review the important concepts that we have learned until now.

59
00:04:06,600 --> 00:04:08,660
Number one, with functional programming,

60
00:04:08,660 --> 00:04:10,840
we focus on what to do.

61
00:04:10,840 --> 00:04:15,380
We convert the numbers into a stream and for each element in that stream,

62
00:04:15,380 --> 00:04:17,680
we specify what needs to be done.

63
00:04:17,680 --> 00:04:20,480
A stream is nothing but a sequence of elements.

64
00:04:20,480 --> 00:04:25,240
For each element, we would want to call the isEven method in here

65
00:04:25,240 --> 00:04:29,330
and we use a method reference to define that in here.

66
00:04:29,340 --> 00:04:32,860
The other approach to defining what needs to be done

67
00:04:32,860 --> 00:04:37,060
with each number, is something called a Lambda Expression. With a Lambda Expression,

68
00:04:37,060 --> 00:04:42,070
you can define the entire code directly in here. With a method reference,

69
00:04:42,070 --> 00:04:45,670
we are actually referring to a method which is defined somewhere else.

70
00:04:45,670 --> 00:04:53,150
However, with the Lambda Expression, we are actually defining the complete logic of the method right here.

71
00:04:53,170 --> 00:04:58,240
I hope you are having a lot of fun and I'm sure a lot of these concepts are new

72
00:04:58,240 --> 00:05:03,260
and as I said earlier, FP, functional programming, is actually a paradigm shift.

73
00:05:03,260 --> 00:05:07,320
So, it will take some time for you to get adjusted to this.

74
00:05:07,360 --> 00:05:10,160
So, follow along and keep watching the next steps

75
00:05:10,160 --> 00:05:13,960
and I'm sure you'll be learning a lot about functional programming.

76
00:05:13,960 --> 00:05:14,930
I'll see you in the next step.

77
00:05:14,960 --> 00:05:15,760
Until then bye-bye.
