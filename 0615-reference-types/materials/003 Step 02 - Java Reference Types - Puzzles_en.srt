1
00:00:02,520 --> 00:00:03,860
Welcome back.

2
00:00:03,870 --> 00:00:08,910
In this video, let's look at a variety of puzzles related to the reference variables.

3
00:00:09,060 --> 00:00:14,820
We'll try and understand in depth about the reference variables, different concepts like equality of

4
00:00:14,820 --> 00:00:21,390
reference variables, initialization of reference variables, and assigning reference variables.

5
00:00:22,110 --> 00:00:24,570
Let's look at all of them in this video.

6
00:00:24,570 --> 00:00:25,290
Let's get started.

7
00:00:25,290 --> 00:00:30,720
Let's say I'm just saying Animal nothing and creating this.

8
00:00:30,720 --> 00:00:33,530
What would be the value which is assigned to nothing?

9
00:00:33,630 --> 00:00:40,350
As you can see, it's null and how is this stored? The way nothing is stored is, because we did not create

10
00:00:40,410 --> 00:00:41,000
anything,

11
00:00:41,010 --> 00:00:42,540
nothing is created

12
00:00:42,540 --> 00:00:46,430
and in here the value which is stored is null.

13
00:00:46,440 --> 00:00:51,700
That's basically means it does not have a memory location present. So, it's empty.

14
00:00:51,810 --> 00:00:55,130
It's kind of empty. Null refers to empty.

15
00:00:55,130 --> 00:01:01,230
So, null here means, it's not referring to anything. It's a reference variable but as of now nothing is

16
00:01:01,230 --> 00:01:03,380
referring to nothing.

17
00:01:03,570 --> 00:01:08,100
I would want to store the reference to cat in nothing.

18
00:01:08,100 --> 00:01:09,600
What would happen?

19
00:01:09,600 --> 00:01:12,970
I'll say nothing = cat.

20
00:01:13,050 --> 00:01:20,160
Now, you can see that, you can see the memory location here is same as this,

21
00:01:20,310 --> 00:01:21,150
right.

22
00:01:21,210 --> 00:01:24,580
When I do nothing = cat,

23
00:01:24,600 --> 00:01:28,760
what happens is, where is cat stored?

24
00:01:28,770 --> 00:01:36,840
1C, that gets copied into, into the memory location of nothing.

25
00:01:36,840 --> 00:01:42,540
So, basically we are not doing anything with the objects. So, when we are saying nothing = cat,

26
00:01:43,110 --> 00:01:49,950
what is happening is the, from the cat reference variable, the location of where the cat object is stored

27
00:01:50,040 --> 00:01:52,390
that is getting copied into nothing.

28
00:01:52,390 --> 00:01:54,540
That's basically what is happening in here.

29
00:01:55,050 --> 00:02:02,100
So, if I say nothing.id = 10, what would be the value of cat.id?

30
00:02:02,280 --> 00:02:05,070
What do you think would be the value of cat.id?

31
00:02:05,100 --> 00:02:09,729
It's also 10, because the way it would work is nothing.id,

32
00:02:09,750 --> 00:02:12,090
nothing is referring to which object? nothing

33
00:02:12,180 --> 00:02:15,280
is referring to 1C.

34
00:02:15,290 --> 00:02:17,550
So, what would happen? Here,

35
00:02:17,550 --> 00:02:20,880
the object at 1C would be changed.

36
00:02:20,880 --> 00:02:24,120
So, I am changing the value of it to 10.

37
00:02:24,150 --> 00:02:30,450
So, what would happen? This value becomes 10. The value inside the object becomes 10.

38
00:02:30,510 --> 00:02:37,130
So, now the value which is pointed to by cat is also referring to the same thing.

39
00:02:37,140 --> 00:02:38,700
So, it has a value of 10.

40
00:02:39,000 --> 00:02:41,610
This is very important concept to understand, right.

41
00:02:41,610 --> 00:02:49,770
When we copy reference variables, when I say nothing = cat, what gets copied is the memory location

42
00:02:49,770 --> 00:02:54,320
where the cat is stored. That gets copied into nothing.

43
00:02:54,840 --> 00:03:00,990
Let's say, now I would say dog = nothing. What would happen? If I say dog = nothing,

44
00:03:00,990 --> 00:03:04,200
1C gets copied into 1A. I'll not do that.

45
00:03:04,200 --> 00:03:06,310
What I'll do is I'll say nothing = dog.

46
00:03:06,330 --> 00:03:07,820
What will happen now?

47
00:03:07,980 --> 00:03:11,800
Nothing = dog, right.

48
00:03:11,820 --> 00:03:12,690
So, what would happen?

49
00:03:12,720 --> 00:03:17,000
The memory location of dog gets stored into nothing.

50
00:03:17,040 --> 00:03:25,530
Now, if I say nothing.id, whose id is printed? nothing.id would print the id of the dog, 1A 12,

51
00:03:25,550 --> 00:03:27,350
right. So let's print. It's

52
00:03:27,390 --> 00:03:33,320
printing 12. So, it's very important to understand what's happening in the background, so that you'd

53
00:03:33,330 --> 00:03:36,270
be able to exactly know what's happening in here.

54
00:03:36,510 --> 00:03:41,850
However, in the case of primitive variables, what would happen? If I say int j = i,

55
00:03:42,000 --> 00:03:42,960
what would happen?

56
00:03:43,010 --> 00:03:49,140
j gets a value of 5, right. So, j is created with a value of 5

57
00:03:49,230 --> 00:03:51,890
and even if I change the value of j,

58
00:03:51,930 --> 00:03:54,000
the only thing which gets modified is j.

59
00:03:54,660 --> 00:03:59,310
So, with the case of primitive variables what you are storing here is the value.

60
00:03:59,310 --> 00:04:03,020
So, if I type in i, i would still have a value of 5.

61
00:04:03,840 --> 00:04:10,350
However, with the case of reference variables, what we are storing is the memory location. When I copy

62
00:04:10,610 --> 00:04:17,399
a reference variable, what gets copied is the reference to the memory location where the actual object

63
00:04:17,430 --> 00:04:18,410
is getting stored.

64
00:04:18,420 --> 00:04:23,000
Now, let's say i == j, what would happen? i == j

65
00:04:23,010 --> 00:04:27,940
is a false, because i has a different value as j.

66
00:04:27,970 --> 00:04:34,440
Now, let's say I copy the value of j = 5,

67
00:04:34,920 --> 00:04:36,850
right. So, i and j now have same values.

68
00:04:36,860 --> 00:04:39,320
So, if I say i == j, what would happen?

69
00:04:39,480 --> 00:04:41,530
It has a value of true, right. Now,

70
00:04:41,630 --> 00:04:47,000
let's take the case of the reference variables. Let's try and recreate the same objects again.

71
00:04:47,010 --> 00:04:58,820
So, let's say Animal dog = new Animal of, dog is referring to 1A, 12, right? So, let's create

72
00:04:58,820 --> 00:04:59,720
exactly the same way

73
00:05:00,380 --> 00:05:02,630
and cat, earlier was referrring to

74
00:05:05,940 --> 00:05:07,890
let's say 1C 10,

75
00:05:07,890 --> 00:05:12,490
right. So, let's say it's 10, cat is referring to here.

76
00:05:12,750 --> 00:05:14,340
We need to create nothing. Instead of nothing,

77
00:05:14,340 --> 00:05:17,200
I'll call it ref, just a ref.

78
00:05:17,490 --> 00:05:27,830
So, I'll say Animal ref and what I'll do in here is, I'll assign the reference to cat. What ref stores

79
00:05:27,930 --> 00:05:30,420
is the reference to the cat. So, 

80
00:05:30,600 --> 00:05:31,080
1C.

81
00:05:31,530 --> 00:05:40,800
I'll also create another dog2. Let's say it also has the same value for the id, right.

82
00:05:40,850 --> 00:05:44,120
So, we are creating another dog2 which will have Animal12.

83
00:05:44,170 --> 00:05:50,020
So, let's say, it's stored here, Animal12 and we are calling this dog2

84
00:05:50,060 --> 00:05:51,460
and this is

85
00:05:51,510 --> 00:05:54,190
at location 1E,

86
00:05:54,380 --> 00:05:54,890
right. So,

87
00:05:55,310 --> 00:05:56,680
very simple. Now,

88
00:05:57,100 --> 00:06:00,920
over here, let's now try the == operator,

89
00:06:00,920 --> 00:06:01,250
right. 

90
00:06:01,250 --> 00:06:03,640
So, cat == dog,

91
00:06:04,250 --> 00:06:07,740
what do you think would be the output? false,

92
00:06:07,820 --> 00:06:10,470
because they are not referring to the same object,

93
00:06:10,470 --> 00:06:12,930
right. That's cool. Now,

94
00:06:13,100 --> 00:06:15,350
cat == ref,

95
00:06:15,640 --> 00:06:16,120
Yep.

96
00:06:16,130 --> 00:06:20,720
They return a true because they're pointing to the exactly the same object, right.

97
00:06:20,810 --> 00:06:23,240
So, this is the same object they're referring to.

98
00:06:23,840 --> 00:06:27,480
However, the interesting thing is dog == dog2.

99
00:06:27,650 --> 00:06:35,740
What do you think will be the output? It says false. Even though they have the same values, that does

100
00:06:35,740 --> 00:06:36,390
not matter.

101
00:06:36,400 --> 00:06:41,230
What is important is the objects they are referring to. The object they're referring to are different.

102
00:06:41,230 --> 00:06:43,630
So, here we are referring to a different object

103
00:06:43,630 --> 00:06:46,540
and here we are referring to a different object. On the heap,

104
00:06:46,690 --> 00:06:49,170
we are referring to two different objects.

105
00:06:49,180 --> 00:06:57,130
So, here 1A and 1E. Even though the values are the same but their locations on the heap are different,

106
00:06:57,130 --> 00:07:00,160
they are distinct objects on the heap.

107
00:07:00,160 --> 00:07:05,980
So, the important thing to understand is when we are comparing reference variables using ==,

108
00:07:05,980 --> 00:07:11,950
what we are just comparing is, if they're referring to the same object.

109
00:07:11,950 --> 00:07:18,380
If they have references of two different objects, it does not matter even if the values are the same.

110
00:07:18,430 --> 00:07:20,750
The answer would be false.

111
00:07:20,770 --> 00:07:25,780
The important thing to understand here is the == operator for a primitive variables

112
00:07:25,990 --> 00:07:33,210
compares the values. But for reference variables, compares if they are referring to the same object.

113
00:07:33,220 --> 00:07:36,790
If they are not referring to the same object, it would return false.

114
00:07:36,790 --> 00:07:40,340
In this video, we discussed how a reference variable is stored in memory,

115
00:07:40,360 --> 00:07:43,530
what would happen when I assign a reference variable to another,

116
00:07:43,720 --> 00:07:47,990
and also how do you compare equality of reference variables.

117
00:07:48,070 --> 00:07:54,730
We learnt that a reference variable, if you do not assign it a value, then it has a value of null

118
00:07:55,090 --> 00:08:04,720
and we also learnt that the reference variable points to a location of memory where the actual object

119
00:08:04,750 --> 00:08:10,720
is stored and when we compare reference objects what we are comparing is if they are pointing to the

120
00:08:10,720 --> 00:08:12,280
same object,

121
00:08:12,280 --> 00:08:16,230
dog = cat only if they are pointing to the same memory location.

122
00:08:16,230 --> 00:08:22,900
cat = ref only if they are pointing to the same memory location and when we are assigning

123
00:08:22,960 --> 00:08:30,890
a reference variable to another, what gets copied is the reference of where it is stored in memory.

124
00:08:31,030 --> 00:08:34,640
The object does not get copied. All that gets copied is the reference.

125
00:08:34,650 --> 00:08:40,110
So, if I say dog = ref, this 1C gets copied into this location.

126
00:08:40,140 --> 00:08:44,730
That's all. The actual object is not really affected.

127
00:08:44,800 --> 00:08:50,680
We'll talk about these concepts much more when we talk about garbage collection in a future section.

128
00:08:50,740 --> 00:08:51,780
Until then, bye bye.

