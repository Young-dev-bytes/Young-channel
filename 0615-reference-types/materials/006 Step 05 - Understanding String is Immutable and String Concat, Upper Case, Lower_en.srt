1
00:00:01,960 --> 00:00:04,210
Welcome back.

2
00:00:04,240 --> 00:00:09,430
You would have heard a number of times that string is immutable.

3
00:00:09,430 --> 00:00:13,050
That means the value of string cannot be changed.

4
00:00:13,060 --> 00:00:14,020
Is that really true?

5
00:00:14,260 --> 00:00:15,990
Yep, it is true.

6
00:00:16,000 --> 00:00:23,500
So, in this video, let's explore that a little bit further and look at other ways of getting a modified

7
00:00:23,500 --> 00:00:25,830
string from a specific string.

8
00:00:26,000 --> 00:00:37,210
Okay. Now, let's type in a simple piece of code String str =  "in28Minutes" and let's say

9
00:00:37,240 --> 00:00:43,180
I'm concatenating str.concat("is awesome"). 

10
00:00:43,420 --> 00:00:48,450
Okay, some self-praise there. But I guess you can ignore that.

11
00:00:48,460 --> 00:00:53,210
So, what we are doing is str, str.concat("is awesome").

12
00:00:53,230 --> 00:01:00,160
Concat is a function to concat a string content of that specific string with another string.

13
00:01:00,160 --> 00:01:01,070
So, here it's

14
00:01:01,210 --> 00:01:07,320
we said "in28Minutes is awesome". Because there is no space either at the end or here.

15
00:01:07,390 --> 00:01:09,870
It's becoming like a single word.

16
00:01:10,020 --> 00:01:13,060
I would try and print the content of str.

17
00:01:13,090 --> 00:01:15,070
What do you think the content of str would be?

18
00:01:17,540 --> 00:01:18,080
Aha!

19
00:01:18,100 --> 00:01:20,170
It's "in28minutes".

20
00:01:20,290 --> 00:01:25,540
So, the thing is, the content of str has not really changed.

21
00:01:25,570 --> 00:01:29,640
So, even though I am calling str.concat("is awesome),

22
00:01:29,770 --> 00:01:31,450
the str remains the same.

23
00:01:31,450 --> 00:01:42,550
What it does is, it returns another string. So, String anotherString = str.concat, this 

24
00:01:42,550 --> 00:01:42,850
time,

25
00:01:42,850 --> 00:01:43,960
let's be very careful.

26
00:01:43,960 --> 00:01:50,000
I'll give a space and say " is awesome". Now, what would happen?

27
00:01:50,080 --> 00:01:53,560
You can see that anotherString is assigned this value

28
00:01:53,560 --> 00:01:56,960
and if I print str, it's "in28minutes".

29
00:01:56,950 --> 00:02:03,100
So, whenever I'm trying to modify a value of a string, what we're doing is not really modifying that

30
00:02:03,100 --> 00:02:04,540
specific string.

31
00:02:04,540 --> 00:02:09,889
So, if I'm doing str.concat for a specific string, what we are doing is, we'll create a new

32
00:02:09,910 --> 00:02:18,370
string and return it back. The original string remains unaffected. So, str remains "in28minutes".

33
00:02:18,380 --> 00:02:23,800
We are creating anotherString, with the value of the new concatenation.

34
00:02:23,830 --> 00:02:33,130
So, let's say now, I'd say String, instead of calling another string, I'll say string2 = anotherString.

35
00:02:33,130 --> 00:02:37,390
I feel that there is, let's say, I would want to append 
a "."(dot).

36
00:02:40,730 --> 00:02:44,700
I'm saying string2 = anotherString.concat.

37
00:02:44,750 --> 00:02:47,750
What happens is a new string is created, string2 with

38
00:02:47,750 --> 00:02:50,440
"in28Minutes is awesome" with a dot.

39
00:02:50,660 --> 00:02:54,880
But if you type in str, it remains "in28Minutes".

40
00:02:54,950 --> 00:02:59,720
If you type in anotherString, it remains this

41
00:02:59,870 --> 00:03:11,950
and if I type in string2, the value is with a dot. This behavior of a String class is called immutability.

42
00:03:12,040 --> 00:03:15,830
Once an instance of a String class is created with a specific value,

43
00:03:16,090 --> 00:03:21,040
you will never be able to change the value of that specific variable.

44
00:03:21,040 --> 00:03:25,000
This "in28Minutes" will always remain "in28Minutes".

45
00:03:25,000 --> 00:03:32,800
If you try and execute a method on it, it would create a new string. But the original value remains as

46
00:03:32,800 --> 00:03:36,160
it is. It remains "in28Minutes".

47
00:03:36,200 --> 00:03:36,590
Okay.

48
00:03:36,670 --> 00:03:42,940
Now that we discussed this in great detail, let's focus on the other methods that are present in String

49
00:03:42,940 --> 00:03:47,700
class to get modified values from the String class.

50
00:03:47,710 --> 00:03:50,710
Let's start with a simple strings, "in28Minutes is awesome.".

51
00:03:50,710 --> 00:03:52,270
Let's assign that.

52
00:03:52,270 --> 00:03:55,410
So, now we have a new string, "in28Minutes is awesome."

53
00:03:55,480 --> 00:03:59,000
and let's say I would want to make it all uppercase.

54
00:03:59,020 --> 00:04:00,490
How do I do that?

55
00:04:00,490 --> 00:04:07,180
You can have a function called toUpperCase, "in 28Minutes is awesome." and similar to that

56
00:04:07,630 --> 00:04:09,730
guess, what is the function to do a lowercase?

57
00:04:10,700 --> 00:04:11,780
Yeah, you're right.

58
00:04:11,780 --> 00:04:13,770
It's lowercase.

59
00:04:13,780 --> 00:04:17,769
Let's say there is some space at the end of a string and the start of a string.

60
00:04:17,769 --> 00:04:20,760
Let's say there's a string called str2,

61
00:04:21,040 --> 00:04:25,850
there is some space at the start and some space at the end

62
00:04:25,850 --> 00:04:27,260
and I would want to remove that.

63
00:04:27,260 --> 00:04:30,910
How do I do that? str2.trim( ).

64
00:04:31,450 --> 00:04:38,210
It removes spaces at the start of a string and at the end of the string. In this video, what we looked

65
00:04:38,210 --> 00:04:44,420
at is the fact that, String class is immutable. Any instance of a String class, once it's created in memory,

66
00:04:44,840 --> 00:04:48,050
the content of that cannot be changed.

67
00:04:48,050 --> 00:04:53,810
We looked at all the different operations which are present in String like toUppercase, toLowercase,

68
00:04:54,200 --> 00:05:02,690
trim, and concatenate which would help us to get a new string with a modified value of an existing string.

69
00:05:02,720 --> 00:05:07,630
I'll see you in the next video where we would be talking about a few more utility methods in the String class.

70
00:05:07,720 --> 00:05:08,540
Until then, bye bye.

