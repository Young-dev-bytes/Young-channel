1
00:00:02,520 --> 00:00:03,860
Welcome back.
欢迎回来。

2
00:00:03,870 --> 00:00:08,910
In this video, let's look at a variety of puzzles related to the reference variables.
在这个视频中，让我们看看与参考变量有关的各种难题。

3
00:00:09,060 --> 00:00:14,820
We'll try and understand in depth about the reference variables, different concepts like equality of
我们将尝试并深入了解引用变量，不同的概念，如引用变量的相等

4
00:00:14,820 --> 00:00:21,390
reference variables, initialization of reference variables, and assigning reference variables.
参考变量的平等，参考变量的初始化，以及分配参考变量。

5
00:00:22,110 --> 00:00:24,570
Let's look at all of them in this video.
让我们在这个视频中看看所有的内容。

6
00:00:24,570 --> 00:00:25,290
Let's get started.
让我们开始吧。

7
00:00:25,290 --> 00:00:30,720
Let's say I'm just saying Animal nothing and creating this.
比方说，我只是说动物什么都没有，然后创建这个。

8
00:00:30,720 --> 00:00:33,530
What would be the value which is assigned to nothing?
分配给nothing的值是什么？

9
00:00:33,630 --> 00:00:40,350
As you can see, it's null and how is this stored? The way nothing is stored is, because we did not create
正如你所看到的，它是null，这是如何存储的呢？Nothing的存储方式是，因为我们没有创建

10
00:00:40,410 --> 00:00:41,000
anything,
任何东西。

11
00:00:41,010 --> 00:00:42,540
nothing is created
什么都没有被创建

12
00:00:42,540 --> 00:00:46,430
and in here the value which is stored is null.
在这里，被存储的值是空的。

13
00:00:46,440 --> 00:00:51,700
That's basically means it does not have a memory location present. So, it's empty.
这基本上意味着它没有一个内存位置存在。所以，它是空的。

14
00:00:51,810 --> 00:00:55,130
It's kind of empty. Null refers to empty.
它是一种空的。Null指的是空。

15
00:00:55,130 --> 00:01:01,230
So, null here means, it's not referring to anything. It's a reference variable but as of now nothing is
所以，null在这里意味着，它没有提到任何东西。它是一个引用变量，但从目前来看，什么都不是

16
00:01:01,230 --> 00:01:03,380
referring to nothing.
指向任何东西。

17
00:01:03,570 --> 00:01:08,100
I would want to store the reference to cat in nothing.
我想在nothing中存储对猫的引用。

18
00:01:08,100 --> 00:01:09,600
What would happen?
会发生什么呢？

19
00:01:09,600 --> 00:01:12,970
I'll say nothing = cat.
我就说nothing = cat。

20
00:01:13,050 --> 00:01:20,160
Now, you can see that, you can see the memory location here is same as this,
现在，你可以看到，你可以看到这里的内存位置与此相同。

21
00:01:20,310 --> 00:01:21,150
right.
对。

22
00:01:21,210 --> 00:01:24,580
When I do nothing = cat,
当我做nothing = cat时。

23
00:01:24,600 --> 00:01:28,760
what happens is, where is cat stored?
会发生什么，cat被储存在哪里？

24
00:01:28,770 --> 00:01:36,840
1C, that gets copied into, into the memory location of nothing.
1C，它被复制到了nothing的内存位置。

25
00:01:36,840 --> 00:01:42,540
So, basically we are not doing anything with the objects. So, when we are saying nothing = cat,
所以，基本上我们没有对这些对象做任何事情。所以，当我们说无=猫的时候。

26
00:01:43,110 --> 00:01:49,950
what is happening is the, from the cat reference variable, the location of where the cat object is stored
所发生的是，从cat引用变量中，cat对象的存储位置

27
00:01:50,040 --> 00:01:52,390
that is getting copied into nothing.
被复制到nothing中。

28
00:01:52,390 --> 00:01:54,540
That's basically what is happening in here.
这基本上就是这里发生的事情。

29
00:01:55,050 --> 00:02:02,100
So, if I say nothing.id = 10, what would be the value of cat.id?
所以，如果我说nothing.id=10，cat.id的值会是什么？

30
00:02:02,280 --> 00:02:05,070
What do you think would be the value of cat.id?
你认为cat.id的值会是多少呢？

31
00:02:05,100 --> 00:02:09,729
It's also 10, because the way it would work is nothing.id,
它也是10，因为它的工作方式是nothing.id。

32
00:02:09,750 --> 00:02:12,090
nothing is referring to which object? nothing
nothing指的是哪个对象？

33
00:02:12,180 --> 00:02:15,280
is referring to 1C.
指的是1C。

34
00:02:15,290 --> 00:02:17,550
So, what would happen? Here,
那么，会发生什么呢？这里。

35
00:02:17,550 --> 00:02:20,880
the object at 1C would be changed.
1C的对象将被改变。

36
00:02:20,880 --> 00:02:24,120
So, I am changing the value of it to 10.
所以，我把它的值改为10。

37
00:02:24,150 --> 00:02:30,450
So, what would happen? This value becomes 10. The value inside the object becomes 10.
那么，会发生什么？这个值变成了10。对象里面的值变成了10。

38
00:02:30,510 --> 00:02:37,130
So, now the value which is pointed to by cat is also referring to the same thing.
所以，现在cat所指向的值也指的是同一个东西。

39
00:02:37,140 --> 00:02:38,700
So, it has a value of 10.
所以，它的值是10。

40
00:02:39,000 --> 00:02:41,610
This is very important concept to understand, right.
这是非常重要的概念，要理解，对吧。

41
00:02:41,610 --> 00:02:49,770
When we copy reference variables, when I say nothing = cat, what gets copied is the memory location
当我们复制引用变量时，当我说nothing = cat时，被复制的是内存位置

42
00:02:49,770 --> 00:02:54,320
where the cat is stored. That gets copied into nothing.
储存猫的地方。这将被复制到nothing中。

43
00:02:54,840 --> 00:03:00,990
Let's say, now I would say dog = nothing. What would happen? If I say dog = nothing,
比方说，现在我说dog = nothing。会发生什么？如果我说狗=无。

44
00:03:00,990 --> 00:03:04,200
1C gets copied into 1A. I'll not do that.
1C就会被复制到1A。我不会那样做。

45
00:03:04,200 --> 00:03:06,310
What I'll do is I'll say nothing = dog.
我将做的是我将说无=狗。

46
00:03:06,330 --> 00:03:07,820
What will happen now?
现在会发生什么？

47
00:03:07,980 --> 00:03:11,800
Nothing = dog, right.
无=狗，对。

48
00:03:11,820 --> 00:03:12,690
So, what would happen?
那么，会发生什么呢？

49
00:03:12,720 --> 00:03:17,000
The memory location of dog gets stored into nothing.
狗的内存位置被存储到nothing中。

50
00:03:17,040 --> 00:03:25,530
Now, if I say nothing.id, whose id is printed? nothing.id would print the id of the dog, 1A 12,
现在，如果我说nothing.id，会打印谁的id？ nothing.id会打印狗的id，1A 12。

51
00:03:25,550 --> 00:03:27,350
right. So let's print. It's
对。所以，让我们打印吧。它是

52
00:03:27,390 --> 00:03:33,320
printing 12. So, it's very important to understand what's happening in the background, so that you'd
打印12。所以，了解后台发生的事情是非常重要的，这样你就可以

53
00:03:33,330 --> 00:03:36,270
be able to exactly know what's happening in here.
这样你就能确切地知道这里正在发生什么。

54
00:03:36,510 --> 00:03:41,850
However, in the case of primitive variables, what would happen? If I say int j = i,
然而，在原始变量的情况下，会发生什么？如果我说int j = i。

55
00:03:42,000 --> 00:03:42,960
what would happen?
会发生什么？

56
00:03:43,010 --> 00:03:49,140
j gets a value of 5, right. So, j is created with a value of 5
j得到一个5的值，对。所以，j被创建时的值是5

57
00:03:49,230 --> 00:03:51,890
and even if I change the value of j,
即使我改变了j的值。

58
00:03:51,930 --> 00:03:54,000
the only thing which gets modified is j.
唯一被修改的就是j。

59
00:03:54,660 --> 00:03:59,310
So, with the case of primitive variables what you are storing here is the value.
所以，在原始变量的情况下，你在这里存储的是值。

60
00:03:59,310 --> 00:04:03,020
So, if I type in i, i would still have a value of 5.
因此，如果我输入i，i的值仍然是5。

61
00:04:03,840 --> 00:04:10,350
However, with the case of reference variables, what we are storing is the memory location. When I copy
然而，在引用变量的情况下，我们所存储的是内存位置。当我复制

62
00:04:10,610 --> 00:04:17,399
a reference variable, what gets copied is the reference to the memory location where the actual object
参考变量时，被复制的是实际对象所在的内存位置的参考

63
00:04:17,430 --> 00:04:18,410
is getting stored.
被存储的内存位置的引用。

64
00:04:18,420 --> 00:04:23,000
Now, let's say i == j, what would happen? i == j
现在，让我们假设i == j，会发生什么？

65
00:04:23,010 --> 00:04:27,940
is a false, because i has a different value as j.
是一个假的，因为i的值和j不同。

66
00:04:27,970 --> 00:04:34,440
Now, let's say I copy the value of j = 5,
现在，让我们说我复制了j=5的值。

67
00:04:34,920 --> 00:04:36,850
right. So, i and j now have same values.
对。所以，i和j现在有相同的值。

68
00:04:36,860 --> 00:04:39,320
So, if I say i == j, what would happen?
那么，如果我说i == j，会发生什么？

69
00:04:39,480 --> 00:04:41,530
It has a value of true, right. Now,
它的值是真，对。现在。

70
00:04:41,630 --> 00:04:47,000
let's take the case of the reference variables. Let's try and recreate the same objects again.
让我们来看看引用变量的情况。让我们再试着重新创建同样的对象。

71
00:04:47,010 --> 00:04:58,820
So, let's say Animal dog = new Animal of, dog is referring to 1A, 12, right? So, let's create
所以，我们说Animal dog = new Animal of，dog是指1A，12，对吗？所以，让我们创建

72
00:04:58,820 --> 00:04:59,720
exactly the same way
完全相同的方式

73
00:05:00,380 --> 00:05:02,630
and cat, earlier was referrring to
而猫，早先指的是

74
00:05:05,940 --> 00:05:07,890
let's say 1C 10,
让我们说1C 10。

75
00:05:07,890 --> 00:05:12,490
right. So, let's say it's 10, cat is referring to here.
对。所以，让我们说是10，猫在这里指的是。

76
00:05:12,750 --> 00:05:14,340
We need to create nothing. Instead of nothing,
我们需要创造无。而不是什么都没有。

77
00:05:14,340 --> 00:05:17,200
I'll call it ref, just a ref.
我就叫它ref，就是一个ref。

78
00:05:17,490 --> 00:05:27,830
So, I'll say Animal ref and what I'll do in here is, I'll assign the reference to cat. What ref stores
所以，我就说Animal ref，我在这里要做的是，我把这个引用分配给cat。ref存储的是

79
00:05:27,930 --> 00:05:30,420
is the reference to the cat. So,
是对猫的引用。所以。

80
00:05:30,600 --> 00:05:31,080
1C.
1C.

81
00:05:31,530 --> 00:05:40,800
I'll also create another dog2. Let's say it also has the same value for the id, right.
我还将创建另一个dog2。让我们说，它也有相同的id值，对吧。

82
00:05:40,850 --> 00:05:44,120
So, we are creating another dog2 which will have Animal12.
所以，我们正在创建另一个狗2，它的id是Animal12。

83
00:05:44,170 --> 00:05:50,020
So, let's say, it's stored here, Animal12 and we are calling this dog2
所以，让我们说，它被存储在这里，Animal12，我们正在调用这个dog2

84
00:05:50,060 --> 00:05:51,460
and this is
而这是

85
00:05:51,510 --> 00:05:54,190
at location 1E,
在位置1E。

86
00:05:54,380 --> 00:05:54,890
right. So,
对。所以。

87
00:05:55,310 --> 00:05:56,680
very simple. Now,
非常简单。现在。

88
00:05:57,100 --> 00:06:00,920
over here, let's now try the == operator,
在这里，让我们现在试试==运算符。

89
00:06:00,920 --> 00:06:01,250
right.
对。

90
00:06:01,250 --> 00:06:03,640
So, cat == dog,
所以，猫==狗。

91
00:06:04,250 --> 00:06:07,740
what do you think would be the output? false,
你认为输出结果是什么？ 假的。

92
00:06:07,820 --> 00:06:10,470
because they are not referring to the same object,
因为它们所指的不是同一个对象。

93
00:06:10,470 --> 00:06:12,930
right. That's cool. Now,
对。这很好。现在。

94
00:06:13,100 --> 00:06:15,350
cat == ref,
cat == ref。

95
00:06:15,640 --> 00:06:16,120
Yep.
是的。

96
00:06:16,130 --> 00:06:20,720
They return a true because they're pointing to the exactly the same object, right.
它们返回一个真，因为它们指向的是完全相同的对象，对吗？

97
00:06:20,810 --> 00:06:23,240
So, this is the same object they're referring to.
所以，这就是它们所指的同一个对象。

98
00:06:23,840 --> 00:06:27,480
However, the interesting thing is dog == dog2.
然而，有趣的是dog == dog2。

99
00:06:27,650 --> 00:06:35,740
What do you think will be the output? It says false. Even though they have the same values, that does
你认为输出结果会是什么？它说是假的。尽管它们有相同的值，这并不

100
00:06:35,740 --> 00:06:36,390
not matter.
并不重要。

101
00:06:36,400 --> 00:06:41,230
What is important is the objects they are referring to. The object they're referring to are different.
重要的是它们所引用的对象。它们所引用的对象是不同的。

102
00:06:41,230 --> 00:06:43,630
So, here we are referring to a different object
所以，这里我们指的是一个不同的对象

103
00:06:43,630 --> 00:06:46,540
and here we are referring to a different object. On the heap,
和这里我们指的是一个不同的对象。在堆上。

104
00:06:46,690 --> 00:06:49,170
we are referring to two different objects.
我们指的是两个不同的对象。

105
00:06:49,180 --> 00:06:57,130
So, here 1A and 1E. Even though the values are the same but their locations on the heap are different,
所以，这里是1A和1E。尽管值是一样的，但它们在堆中的位置是不同的。

106
00:06:57,130 --> 00:07:00,160
they are distinct objects on the heap.
它们是堆上不同的对象。

107
00:07:00,160 --> 00:07:05,980
So, the important thing to understand is when we are comparing reference variables using ==,
所以，需要理解的是，当我们使用==来比较引用变量时。

108
00:07:05,980 --> 00:07:11,950
what we are just comparing is, if they're referring to the same object.
我们所要比较的是，如果它们引用的是同一个对象。

109
00:07:11,950 --> 00:07:18,380
If they have references of two different objects, it does not matter even if the values are the same.
如果它们有两个不同对象的引用，即使值是一样的也没有关系。

110
00:07:18,430 --> 00:07:20,750
The answer would be false.
答案将是假的。

111
00:07:20,770 --> 00:07:25,780
The important thing to understand here is the == operator for a primitive variables
这里需要理解的是，原始变量的==操作符

112
00:07:25,990 --> 00:07:33,210
compares the values. But for reference variables, compares if they are referring to the same object.
比较了数值。但是对于引用变量来说，比较的是它们是否引用了同一个对象。

113
00:07:33,220 --> 00:07:36,790
If they are not referring to the same object, it would return false.
如果它们不是指向同一个对象，就会返回错误。

114
00:07:36,790 --> 00:07:40,340
In this video, we discussed how a reference variable is stored in memory,
在这个视频中，我们讨论了引用变量是如何存储在内存中的。

115
00:07:40,360 --> 00:07:43,530
what would happen when I assign a reference variable to another,
当我把一个引用变量分配给另一个引用变量时会发生什么？

116
00:07:43,720 --> 00:07:47,990
and also how do you compare equality of reference variables.
以及如何比较引用变量的平等性。

117
00:07:48,070 --> 00:07:54,730
We learnt that a reference variable, if you do not assign it a value, then it has a value of null
我们了解到，如果你不给引用变量赋值，那么它的值就是null。

118
00:07:55,090 --> 00:08:04,720
and we also learnt that the reference variable points to a location of memory where the actual object
我们还了解到，引用变量指向实际对象所在的内存位置。

119
00:08:04,750 --> 00:08:10,720
is stored and when we compare reference objects what we are comparing is if they are pointing to the
当我们比较引用对象时，我们要比较的是它们是否指向了

120
00:08:10,720 --> 00:08:12,280
same object,
同一个对象。

121
00:08:12,280 --> 00:08:16,230
dog = cat only if they are pointing to the same memory location.
dog = cat，只有当它们指向同一个内存位置时。

122
00:08:16,230 --> 00:08:22,900
cat = ref only if they are pointing to the same memory location and when we are assigning
cat = ref 只有当它们指向相同的内存位置时，当我们将一个引用变量赋值给另一个引用变量时，得到的是什么？

123
00:08:22,960 --> 00:08:30,890
a reference variable to another, what gets copied is the reference of where it is stored in memory.
当我们将一个引用变量赋值给另一个变量时，被复制的是它在内存中存储的引用。

124
00:08:31,030 --> 00:08:34,640
The object does not get copied. All that gets copied is the reference.
对象不会被复制。所有被复制的都是引用。

125
00:08:34,650 --> 00:08:40,110
So, if I say dog = ref, this 1C gets copied into this location.
所以，如果我说dog = ref，这个1C被复制到这个位置。

126
00:08:40,140 --> 00:08:44,730
That's all. The actual object is not really affected.
这就是全部。实际的对象并没有受到真正的影响。

127
00:08:44,800 --> 00:08:50,680
We'll talk about these concepts much more when we talk about garbage collection in a future section.
当我们在以后的章节中讨论垃圾回收时，我们会更多地讨论这些概念。

128
00:08:50,740 --> 00:08:51,780
Until then, bye bye.
在那之前，拜拜了。

