1
00:00:02,450 --> 00:00:03,910
Welcome back.

2
00:00:03,920 --> 00:00:09,030
In this video, we would be talking about reference types and reference variables.

3
00:00:09,260 --> 00:00:16,309
We will understand how reference variables are stored in memory and also compare and contrast them with

4
00:00:16,370 --> 00:00:19,090
the primitive variables.

5
00:00:19,100 --> 00:00:20,450
Okay, let's get started.

6
00:00:20,450 --> 00:00:29,690
What is a reference type, right? So, any class that you create is a reference type. So, here the class Planet

7
00:00:29,810 --> 00:00:32,180
is a reference type.

8
00:00:32,180 --> 00:00:35,510
There are also pre-defined classes in Java.

9
00:00:35,570 --> 00:00:38,720
String is one of the pre-defined classes in Java.

10
00:00:38,720 --> 00:00:40,780
This is a reference type.

11
00:00:40,880 --> 00:00:50,540
We looked at BigDecimal earlier and BigDecimal is a reference type. Instances of the classes that we

12
00:00:50,540 --> 00:00:51,260
create,

13
00:00:51,260 --> 00:00:59,470
here we are creating an instance of the Planet, new Planet and we are storing it into jupiter;

14
00:00:59,570 --> 00:01:04,040
jupiter is a reference variable.

15
00:01:04,040 --> 00:01:06,650
Why is this concept called reference variable important

16
00:01:06,800 --> 00:01:12,450
and how are they different from a primitive variable?
Here, i is a primitive variable.

17
00:01:12,830 --> 00:01:16,660
So, here I am saying jupiter is a reference variable.

18
00:01:16,690 --> 00:01:24,200
Let's now start with discussion about how the reference variables are stored in memory and how is this

19
00:01:24,200 --> 00:01:27,160
new instance stored in memory.

20
00:01:27,200 --> 00:01:28,440
Let's create another class.

21
00:01:28,460 --> 00:01:31,530
I'll call this class, Animal.

22
00:01:31,640 --> 00:01:34,980
Let's say, in this Animal class we have a int id.

23
00:01:34,990 --> 00:01:43,150
So, for each Animal let's say, we are assigning an id and to make it easier for ourselves, I'll create a 

24
00:01:43,250 --> 00:01:44,240
constructor.

25
00:01:44,400 --> 00:01:50,130
If you remember the syntax of the constructor, it's very simple, right. So, the name of the class followed

26
00:01:50,130 --> 00:01:56,780
by the open bracket followed by what arguments I would want to pass in, int id

27
00:01:57,480 --> 00:02:08,139
and over here I can do this.id = id and close bracket and sorry, close brace and close 

28
00:02:08,139 --> 00:02:08,500
brace.

29
00:02:08,560 --> 00:02:09,070
That's it. So,

30
00:02:09,100 --> 00:02:12,700
we have an Animal created in here.

31
00:02:12,910 --> 00:02:15,940
This Animal can have a id value, right.

32
00:02:15,970 --> 00:02:19,870
So, I'm not going to create getters and setters and make this private for now.

33
00:02:20,200 --> 00:02:22,210
Let's just keep it very simple.

34
00:02:22,210 --> 00:02:26,740
Now this class called Animal has a field called id,

35
00:02:27,010 --> 00:02:27,670
right.

36
00:02:27,670 --> 00:02:31,190
So. now how do I create instances of the Animal class? I can create it

37
00:02:31,380 --> 00:02:34,250
Anima dog = new Animal

38
00:02:34,390 --> 00:02:35,930
and pass the parameter. Let's say

39
00:02:35,970 --> 00:02:39,510
the id I am assigning to this dog is 12, right.

40
00:02:39,550 --> 00:02:40,750
I can create cat

41
00:02:43,310 --> 00:02:47,340
and assign it a value of 15.

42
00:02:47,360 --> 00:02:51,310
This is kind of the code that we typically write.

43
00:02:51,320 --> 00:02:54,630
Nothing fancy in here. It's very simple code.

44
00:02:54,710 --> 00:02:58,700
What is happening here is what we are really interested in.

45
00:02:58,760 --> 00:03:04,290
Now, let's bring up a fancy spreadsheet to understand what's happening in the background,

46
00:03:04,330 --> 00:03:13,480
right. Whenever you create a new object, whenever you create a new object, these things are stored in something

47
00:03:13,480 --> 00:03:15,520
called a Heap.

48
00:03:15,520 --> 00:03:23,110
When a Java program runs, it has some memory and there are two kinds of memory, one is a Stack and the

49
00:03:23,200 --> 00:03:32,740
other one is a Heap. All new objects are created on the heap. This heap is kind of a common place which

50
00:03:32,740 --> 00:03:35,380
is shared by the entire Java program.

51
00:03:35,860 --> 00:03:45,190
So, in this heap all your objects are stored.  So, new Animal(12), let's say is stored in here. I'll say Animal

52
00:03:45,820 --> 00:03:46,210
12.

53
00:03:47,650 --> 00:03:53,140
This is not exactly what will be stored in the memory. But let's use that as a reference. So, Animal12

54
00:03:53,530 --> 00:04:00,090
will be created on the heap. Heap consists of a number of locations,

55
00:04:00,100 --> 00:04:00,820
right.

56
00:04:00,880 --> 00:04:03,840
So, I just gave some names to this location.

57
00:04:04,450 --> 00:04:09,010
Let's not worry about the size of this location and all that kind of stuff because that would become

58
00:04:09,010 --> 00:04:10,260
very complex.

59
00:04:10,270 --> 00:04:15,520
Let's just give a name to these locations and use them as the reference.

60
00:04:15,910 --> 00:04:26,850
So, let's say Animal12 is stored in location 1A and Animal15 is stored in 1C. It can be randomly

61
00:04:26,850 --> 00:04:32,550
assigned anywhere and can be stored anywhere. But I'm just assuming that it's stored in a specific location

62
00:04:32,550 --> 00:04:33,800
on the heap.

63
00:04:33,820 --> 00:04:39,290
Now, when we create primitive variables, they're always created on the stack.

64
00:04:39,300 --> 00:04:44,460
So, when I create a local variable in a method, it's always created in a stack.

65
00:04:44,490 --> 00:04:49,120
So, this is the way it would be stored. So, the variable name is i,

66
00:04:49,200 --> 00:04:50,560
the value is 5.

67
00:04:50,640 --> 00:04:52,440
That's how they are stored.

68
00:04:52,440 --> 00:04:56,420
So, when I create a primitive variable, all that would be stored is a variable name

69
00:04:56,450 --> 00:04:59,040
i, with a value 5. 

70
00:04:59,100 --> 00:05:05,840
When I create a reference variable, as we discussed earlier, this is stored. Where is this stored?

71
00:05:05,880 --> 00:05:07,860
This is stored on the heap.

72
00:05:07,920 --> 00:05:09,640
Now, where is this stored?

73
00:05:09,690 --> 00:05:13,650
The dog is actually stored on the stack somewhere.

74
00:05:13,680 --> 00:05:16,720
So, dog is stored. The variable name is dog

75
00:05:16,890 --> 00:05:22,460
and what would be the value, dog is refering to what? new Animal(12)

76
00:05:22,530 --> 00:05:25,370
So, what is the location, Animal(12)?

77
00:05:25,390 --> 00:05:33,320
It's at 1A. So, the value which would be stored in here is the memory location.

78
00:05:33,570 --> 00:05:41,400
So, in the dog, what is actually stored is a reference of the memory location, where the actual dog

79
00:05:41,460 --> 00:05:49,740
object is stored. That's the most important concept and that's why it's called a reference variable.

80
00:05:49,900 --> 00:05:54,330
It's called a reference variable, dog is called a reference variable, because does it have the value of

81
00:05:54,330 --> 00:05:54,780
the dog?

82
00:05:54,990 --> 00:06:04,880
Nope. It refers to the memory location of where the dog object or the animal object exists in memory.

83
00:06:04,890 --> 00:06:08,010
Similarly, the other variable, cat.

84
00:06:08,310 --> 00:06:10,560
So, now cat. How does the cat get created?

85
00:06:10,560 --> 00:06:11,430
What's is the id?

86
00:06:11,430 --> 00:06:14,060
15, right. So, 15,

87
00:06:14,150 --> 00:06:14,810
1C. 

88
00:06:14,910 --> 00:06:23,910
So, this is how reference variables are stored in memory. The actual object is created on the heap

89
00:06:24,420 --> 00:06:35,220
and what would be stored in here is a reference to the location where the object is stored in memory.

90
00:06:35,220 --> 00:06:42,330
This distinction is the reason why a difference between primitive and reference variables is very very

91
00:06:42,330 --> 00:06:44,810
important. In the next video,

92
00:06:44,820 --> 00:06:52,050
let's dig a step deeper and look at what would happen when I assign a primitive variable to another

93
00:06:52,290 --> 00:06:58,500
and what would happen when I assign a reference variable to another and also look at a wide variety

94
00:06:58,500 --> 00:07:00,070
of other operations.

95
00:07:00,300 --> 00:07:01,150
Until then, bye bye.

